<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Deltanomics</title>
    <link>/categories/r/</link>
      <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020</copyright><lastBuildDate>Sun, 16 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu92a9dc9639b79cadf266306904fb01f6_516996_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>/categories/r/</link>
    </image>
    
    <item>
      <title>U.S. Food Deserts</title>
      <link>/post/food-deserts-data-clean-merge/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/food-deserts-data-clean-merge/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;A considerable issue today related to food and rural population research are food deserts.
Food deserts are a complicated issue, but the idea centres on a simple premise: areas, where it’s hard to reach a grocery store or access food, can be thought of as food deserts.
If you’re interested in knowing more about the discourse on food deserts, than I’d recommend looking into these papers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blanchard, T. C., &amp;amp; Matthews, T. L. (2007). Retail concentration, food deserts, and food-disadvantaged communities in rural America. Remaking the North American food system: &lt;em&gt;Strategies for sustainability&lt;/em&gt;, 201-215.&lt;/li&gt;
&lt;li&gt;Gundersen, C., Kreider, B., &amp;amp; Pepper, J. V. (2017). Partial identification methods for evaluating food assistance programs: a case study of the causal impact of SNAP on food insecurity. &lt;em&gt;American Journal of Agricultural Economics&lt;/em&gt;, 99(4), 875-893.&lt;/li&gt;
&lt;li&gt;Andrews, M., Bhatta, R., &amp;amp; Ploeg, M. V. (2013). An alternative to developing stores in food deserts: can changes in SNAP benefits make a difference?. &lt;em&gt;Applied Economic Perspectives and Policy&lt;/em&gt;, 35(1), 150-170.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;the-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The data&lt;/h1&gt;
&lt;p&gt;Data for this post is on food deserts and comes from Kaggle.
Kaggle is an excellent resource for aspiring data scientists and experienced ones.
Specifically, the page called &lt;a href=&#34;https://www.kaggle.com/tcrammond/food-access-and-food-deserts?select=food_access_variable_lookup.csv&#34;&gt;Food Deserts in the US: Food access for sub-populations of the United States&lt;/a&gt;.
You can download the data directly from the link in the sentence above.
The code below reads in the data.&lt;/p&gt;
&lt;div id=&#34;libraries-and-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Libraries and data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# For data wrangling/tables
library(tidyverse)
library(janitor)
library(knitr)
library(kableExtra)
library(glue)
library(tidytext)
library(scales)

# For mapping and census data
library(tigris)
library(leaflet)
library(leaflet.extras)
library(maps)
library(sf)
library(widgetframe)
map &amp;lt;- purrr::map

# US county and state fips data is built-in R
data(&amp;quot;county.fips&amp;quot;)
county.fips &amp;lt;- 
 county.fips %&amp;gt;% 
  as_tibble()

data(&amp;quot;state.fips&amp;quot;)
state.fips &amp;lt;- 
  state.fips %&amp;gt;% 
  as_tibble()


# File 1
food_access_research_atlas &amp;lt;- 
  read_csv(&amp;#39;~/Downloads/665808_1173338_bundle_archive/food_access_research_atlas.csv&amp;#39;) %&amp;gt;% 
  clean_names()

# File 2
lookup &amp;lt;- 
  read_csv(&amp;#39;~/Downloads/665808_1173338_bundle_archive/food_access_variable_lookup.csv&amp;#39;) %&amp;gt;% 
  clean_names()

# Pull in the USDA data from a directory I created in my cloud storage.
rural_urban &amp;lt;-
  read_csv(&amp;#39;~/OneDrive - SRUC/Data/usda/ruralurbancodes2013.csv&amp;#39;) %&amp;gt;%
  select(state, 
         county = county_name,
         rucc_2013,
         desc = description)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;theme&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Theme&lt;/h2&gt;
&lt;p&gt;We’ll use a custom theme for &lt;code&gt;ggplot2&lt;/code&gt; plots made with this code.
Note the &lt;code&gt;...&lt;/code&gt; notation, which allows us to make on-the-fly changes without calling another &lt;code&gt;theme&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# a custom theme for ggplots
post_theme &amp;lt;- function(...) {
  theme(
    text = 
      element_text(
        color = &amp;#39;black&amp;#39;,
         family = &amp;#39;serif&amp;#39;),
    axis.text = 
      element_text(
        color = &amp;#39;black&amp;#39;, 
        size = 12.5),
    panel.background = 
      element_blank(),
    axis.line.x = 
      element_line(
        color = &amp;#39;black&amp;#39;),
    axis.ticks = element_blank(),
    plot.margin = margin(.75, .75, .75, .75, &amp;#39;cm&amp;#39;),
    plot.caption = 
      element_text(hjust = 0,
                                face = &amp;quot;italic&amp;quot;),
    plot.title = 
      element_text(
        face = &amp;#39;bold&amp;#39;),
    plot.subtitle = 
      element_text(face = &amp;#39;bold&amp;#39;),
    plot.title.position = &amp;quot;plot&amp;quot;,
    plot.caption.position =  &amp;quot;plot&amp;quot;, 
    strip.background = 
      element_blank(), 
    strip.text = 
      element_text(
        face = &amp;#39;bold&amp;#39;)
  ) +
    theme(...) # this bit allows us to make changes using this same function instead of calling two theme functions.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An exciting caveat with the data is that it comes in two files.
One file is the data, and the other file is what’s known as a data dictionary or data lookup.
The lookup file is a database that explains what each variable is.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;linking-with-rural-urban-classification-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Linking with rural-urban classification data&lt;/h2&gt;
&lt;p&gt;There isn’t a perfect indicator of rural/urban classification in the data, so, as usual, we’ll need to add one.
I’ve used the USDA Rural-Urban Classifications before in the post on &lt;a href=&#34;https://www.thedeltanomics.com/post/covid-19-rural-deltanomics/&#34;&gt;Covid-19 and Rural Areas in the U.S.&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# clean names will be used to help get joining data in format that will merge well
clean_names &amp;lt;- 
  function(x){
    x &amp;lt;- str_to_lower(x)
    x &amp;lt;- str_remove_all(x, &amp;#39;county&amp;#39;)
    x &amp;lt;- str_remove_all(x, &amp;#39;[[:digit:]]&amp;#39;)
    x &amp;lt;- str_squish(x)
    x &amp;lt;- str_trim(x)
    x
  }

rural_urban &amp;lt;- 
  rural_urban %&amp;gt;% 
  mutate(county = clean_names(county)) %&amp;gt;% 
  rename(abb = state) %&amp;gt;% 
  left_join(
tibble(abb = state.abb, 
       state = clean_names(state.name)),
       by = &amp;quot;abb&amp;quot;) %&amp;gt;% 
  mutate(state_county = 
           glue(&amp;#39;{state} {county}&amp;#39;)) %&amp;gt;% 
  select(state_county, rucc_2013, desc)

rural_food_desert &amp;lt;- 
  food_access_research_atlas %&amp;gt;% 
  mutate(state = clean_names(state),
            county = clean_names(county),
            state_county = 
                  glue(&amp;#39;{state} {county}&amp;#39;)) %&amp;gt;% 
  left_join(rural_urban, 
            by = &amp;#39;state_county&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;working-with-lookup-files---a-closer-look-at-snap&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Working with lookup files - A closer look at SNAP&lt;/h1&gt;
&lt;p&gt;Lookup files are often called &lt;em&gt;data dictionaries&lt;/em&gt;.
Data dictionaries are a common component of many large datasets that are used extensively in the public sphere.
As previously mentioned, quite often, a data dictionary or lookup is just another file that accompanies the primary data.&lt;/p&gt;
&lt;p&gt;The data dictionary isn’t “data” in the traditional sense (i.e. we aren’t going to be performing cross-tabulations on it anytime soon), but it is a useful approach to treat it just like any other data file.
For instance:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We can append data dictionaries/lookups to the central database as we did previously;&lt;/li&gt;
&lt;li&gt;We can use natural language processing on the data dictionaries to get a better understanding of the data holds; and,&lt;/li&gt;
&lt;li&gt;We can use data tools like &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;purrr&lt;/code&gt; to pick apart the lookup file and make it more manageable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s say we are interested in looking at SNAP.
SNAP is short for &lt;em&gt;Supplemental Nutrition Assistance Program&lt;/em&gt;.
According to the &lt;a href=&#34;https://www.fns.usda.gov/snap/supplemental-nutrition-assistance-program&#34;&gt;USDA’s website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SNAP provides nutrition benefits to supplement the food budget of needy families so they can purchase healthy food and move towards self-sufficiency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can use &lt;code&gt;dplyr&lt;/code&gt; and the &lt;code&gt;kable&lt;/code&gt; function from &lt;code&gt;knitr&lt;/code&gt; to quickly search and display the results for variables on SNAP.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lookup %&amp;gt;% 
  filter(str_detect(description, &amp;#39;SNAP&amp;#39;)) %&amp;gt;% 
  mutate(long_name = 
           str_trunc(long_name, 10)) %&amp;gt;% 
  kable(format = &amp;#39;html&amp;#39;, booktab = T) %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
field
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
long_name
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
description
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
lasnaphalf
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Low acc…
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Housing units receiving SNAP benefits count beyond 1/2 mile from supermarket
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
lasnaphalfshare
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Low acc…
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Share of tract housing units receiving SNAP benefits count beyond 1/2 mile from supermarket
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
lasnap1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Low acc…
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Housing units receiving SNAP benefits count beyond 1 mile from supermarket
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
lasnap1share
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Low acc…
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Share of tract housing units receiving SNAP benefits count beyond 1 mile from supermarket
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
lasnap10
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Low acc…
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Housing units receiving SNAP benefits count beyond 10 miles from supermarket
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
lasnap10share
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Low acc…
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Share of tract housing units receiving SNAP benefits count beyond 10 miles from supermarket
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
lasnap20
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Low acc…
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Housing units receiving SNAP benefits count beyond 20 miles from supermarket
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
lasnap20share
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Low acc…
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Share of tract housing units receiving SNAP benefits count beyond 20 miles from supermarket
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TractSNAP
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Tract h…
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Total count of housing units receiving SNAP benefits in tract
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Glancing at the table above, one will quickly see nine variables cover SNAP benefits.
Also, it appears that SNAP variables are often distinguished by have either &lt;em&gt;number&lt;/em&gt; or &lt;em&gt;share&lt;/em&gt;, which means that the variable has either total counts of percents of occurrence.&lt;/p&gt;
&lt;p&gt;Let’s take a look at some and compare them by state.
We’ll use the verb &lt;code&gt;contains&lt;/code&gt; within &lt;code&gt;dyplyr&lt;/code&gt; to grab variables contain &lt;em&gt;SNAP&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rural_food_desert_snap &amp;lt;- 
  rural_food_desert %&amp;gt;% 
  select(state, county, desc, census_tract, median_family_income,
         contains(&amp;#39;snap&amp;#39;)) &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-things-tidy&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting things tidy&lt;/h1&gt;
&lt;p&gt;Before going forward we’ll need to tidy our data a bit.
Note the use of &lt;code&gt;pivot_longer&lt;/code&gt; instead of &lt;code&gt;spread&lt;/code&gt;; &lt;code&gt;pivot_longer&lt;/code&gt; and &lt;code&gt;pivot_wider&lt;/code&gt; are &lt;code&gt;dplyr&lt;/code&gt;’s new verb names for changing between wide and long formats.
We won’t discuss the major changes here, but it’s good practice to read over big changes like this; you can do so &lt;a href=&#34;https://cengel.github.io/R-data-wrangling/tidyr.html&#34;&gt;here&lt;/a&gt;.
Once we have our data in a way that we like it let’s do some quick plots, first looking at state and county levels, then looking at rural-urban areas.&lt;/p&gt;
&lt;div id=&#34;travel-distance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Travel distance&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;county_snap_dist &amp;lt;-
  rural_food_desert_snap %&amp;gt;% 
  mutate(id = group_indices(., census_tract)) %&amp;gt;%
  select(state, 
         county, 
         desc,
         median_family_income,
         census_tract,
         contains(&amp;#39;share&amp;#39;)) %&amp;gt;% 
  pivot_longer(-c(state, 
                  county, 
                  desc, 
                  census_tract,
                  median_family_income),
               names_to =  &amp;#39;snap_dist&amp;#39;, 
               values_to = &amp;#39;rate&amp;#39;) %&amp;gt;% 
  mutate(snap_dist = 
           parse_number(snap_dist), 
         snap_dist = 
           replace_na(snap_dist, .5)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s quickly take a look at the top rate (percent) of people in census tracts for each distance from a supermarket.
We’ll look at only those people classified as living in rural counties.&lt;/p&gt;
&lt;p&gt;The plot below is a boxplot that shows the spread of rate SNAP receivers across distances to supermarkets.
It shows that there is a great deal of variability in terms of distance as well as a high number of people who have to travel quite far.
The rate of SNAP receivers appears to be negatively correlated with distance, meaning that the rate of SNAP receivers decreases as distance increases.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;label_new &amp;lt;- 
  function(x){
    glue(&amp;#39;{x} miles to\nnearest supermarket&amp;#39;)
  }

county_snap_dist %&amp;gt;% 
  mutate(snap_dist = as.factor(snap_dist),
         snap_dist = fct_relabel(snap_dist, 
                                 .fun = label_new)) %&amp;gt;% 
  filter(rate &amp;gt; 0) %&amp;gt;% 
  ggplot(aes(median_family_income, rate))+
  stat_binhex()+
  geom_smooth(color = &amp;#39;#C4C4C4&amp;#39;, 
              method = &amp;#39;gam&amp;#39;)+
  scale_fill_viridis_c(labels = comma, 
                       name = &amp;#39;# of\ncensus tracts&amp;#39;)+
  scale_x_continuous(labels = dollar)+
  scale_y_continuous(labels = percent, 
                     expand = c(0, 0))+
  facet_grid(~snap_dist, )+
  post_theme(axis.text.x = element_text(angle = 45, 
                                        hjust = 1))+
    labs(title = &amp;#39;Association between SNAP rate and family income by travel distance to supermarket&amp;#39;, 
         x = &amp;#39;Median family income\nper census tract&amp;#39;, 
         y = &amp;#39;Percent SNAP\nrecipient&amp;#39;, 
        caption = &amp;#39;Smoothed line fits a generalized additive model (GAM) to data: y ~ s(x, bs = &amp;quot;cs&amp;quot;).&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-29-u-s-food-deserts_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;building-interactive-maps&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Building interactive maps&lt;/h1&gt;
&lt;p&gt;Our data is aggregated by census tract and is therefore geographical by nature.
Mapping in R has made considerable developments in the past 5 to 10 years, and any work with rural/urban analysis can usually be benefited through some geospatial analysis.
So learning to make maps is always helpful!&lt;/p&gt;
&lt;div id=&#34;leaflet-maps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Leaflet maps&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;leaflet&lt;/code&gt; package is a fantastic way to make interactive maps with a relatively small amount of code.
It works really well will with the &lt;code&gt;sf&lt;/code&gt; package for geo-computational analysis.
Moreover, we can use the &lt;code&gt;tigris&lt;/code&gt; package to get census tract information straight in R.
&lt;code&gt;tigris&lt;/code&gt; can return &lt;code&gt;sf&lt;/code&gt; objects, making for speedy workflow between the three packages.&lt;/p&gt;
&lt;p&gt;Below, we’ll take a look those census tracts that have a large proportion of the population that have to travel 20 or miles to a supermarket and that have a high percentage of SNAP recipients.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Get all 20 miles or more that have at least some percent of SNAP users
top_perc_20m &amp;lt;- 
  county_snap_dist %&amp;gt;% 
  filter(snap_dist == 20, 
         rate &amp;gt; 0) %&amp;gt;% 
  mutate(desc = replace_na(desc, &amp;#39;Unknown&amp;#39;))


top_perc_20m_ls &amp;lt;- 
  top_perc_20m %&amp;gt;% 
  mutate(id = as.character(row_number())) %&amp;gt;% 
  split(.$id)


# retrieve all census tract polygons per county using a loop and the applying the tracts function from the tigris package.

top_perc_20_sf_ls &amp;lt;- 
  map(top_perc_20m_ls, 
      possibly(function(x){
        .y &amp;lt;-   tracts(state = x$state, 
                       county = x$county, 
                       cb = T) 
        
        single_track &amp;lt;- 
          str_sub(x$census_tract,
                start = 6, 
                end = 9)
        
        .z &amp;lt;- .y %&amp;gt;% 
          filter(NAME %in% single_track)
        
        .z$census_tract &amp;lt;- x$census_tract
        .z$rate &amp;lt;- x$rate
        .z$dist &amp;lt;- x$snap_dist
        .z$desc &amp;lt;- x$desc
        .z$id &amp;lt;-  x$id
        .z$county &amp;lt;-  x$county
        .z$state &amp;lt;-  x$state
       .z$median_family_income &amp;lt;-x$median_family_income
        
        return(.z)
        
      }, NULL)) 

# NOTE do.call to combine the sf objects
top_20_sf &amp;lt;- 
  do.call(rbind,top_perc_20_sf_ls) 

# This whole code-block may take quite a bit of time to run depending on your computer&amp;#39;s specs. It&amp;#39;s best to go ahead and save the output and then comment out the code above. This reduces the risk of accidently changing or re-running things, then having to wait to make adjustments. 

write_sf(top_20_sf,&amp;#39;~/Documents/temp/top_20_sf.shp&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It only takes a few lines of code to produce a great map in &lt;code&gt;leaflet&lt;/code&gt;.
Below you can see the polygons of the top 25 SNAP recipients in food deserts that are 20 miles or more to supermarkets.
And, while it is inciteful in its own right, it leaves us wanting something more.
With the help of &lt;code&gt;HTML&lt;/code&gt;, we can turn this map into something fantastic!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;leaflet(top_20_sf) %&amp;gt;% 
  addProviderTiles(&amp;quot;CartoDB.Positron&amp;quot;) %&amp;gt;% 
  addPolygons(color = &amp;quot;tomato&amp;quot;) %&amp;gt;% 
  frameWidget()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2020-07-29-u-s-food-deserts_files/figure-html//widgets/widget_unnamed-chunk-11.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;leaflet-to-the-next-level&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Leaflet to the next level&lt;/h3&gt;
&lt;p&gt;One way to dramatically improve our interactive &lt;code&gt;leaflet&lt;/code&gt; maps is to use &lt;code&gt;HTML&lt;/code&gt; code. &lt;code&gt;HTML&lt;/code&gt; is essential a coding approach to formatting web applications.
Officially &lt;code&gt;HTML&lt;/code&gt; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can also use our data to correspond to map polygon colours.
The &lt;code&gt;leaflet.extras&lt;/code&gt; package offers a lot of great extra options to add to &lt;code&gt;leaflet&lt;/code&gt; maps.
The best part is that it is relatively straightforward to add these options.&lt;/p&gt;
&lt;p&gt;Let’s take the following steps to &lt;em&gt;trick&lt;/em&gt; out our &lt;code&gt;leaflet&lt;/code&gt; map!&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We’ll use &lt;code&gt;HTML&lt;/code&gt; to create some tooltips that provide users information when they hover over polygons in the map.&lt;/li&gt;
&lt;li&gt;Create a custom function to map the fill/colour of the &lt;code&gt;leaflet&lt;/code&gt; polygons to help guide the user’s eye towards the worst off places in terms of SNAP and distance to supermarket.
NOTE: Our custom colour function is from &lt;a href=&#34;https://stackoverflow.com/questions/15006211/how-do-i-generate-a-mapping-from-numbers-to-colors-in-r/18749392&#34;&gt;this question on StackOverflow.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;leaflet.extras&lt;/code&gt; to add some great functionality that makes the map more user-friendly.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;remove_words &amp;lt;- 
  glue_collapse(c(&amp;#39;Nonmetro - &amp;#39;, 
                  &amp;#39;Metro - &amp;#39;),&amp;#39;|&amp;#39;)

## tooltip with html
tooltip &amp;lt;- top_20_sf %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  mutate(county = str_to_title(county), 
         state = str_to_title(state), 
         rate = round(rate, 2),
         rate = percent(rate), 
         desc = str_remove_all(desc,
                               remove_words), 
         median_family_income = 
           dollar(median_family_income)) %&amp;gt;% 
  transmute(tip = glue(&amp;#39;&amp;lt;b&amp;gt;County:&amp;lt;/b&amp;gt; {county} &amp;lt;br&amp;gt; &amp;lt;b&amp;gt;State:&amp;lt;/b&amp;gt; {state} &amp;lt;br&amp;gt; &amp;lt;b&amp;gt;SNAP percent:&amp;lt;/b&amp;gt; {rate} &amp;lt;br&amp;gt; &amp;lt;b&amp;gt;*Rural/Urban class:&amp;lt;/b&amp;gt; {desc} &amp;lt;br&amp;gt; &amp;lt;b&amp;gt;Median family income:&amp;lt;/b&amp;gt; {median_family_income} &amp;lt;br&amp;gt;&amp;lt;b&amp;gt;Tract:&amp;lt;/b&amp;gt; {census_tract}&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;- All areas are 20 or more miles from a supermarket.&amp;lt;br&amp;gt;* Rural/Urban classification determined at county-level.&amp;#39;))

# change polygon colour to correspond to a numeric variable in the database
map2color &amp;lt;- function(x, 
                      pal, 
                      limits = NULL) {
  if (is.null(limits))
    limits = range(x)
  pal[findInterval(x, 
               seq(limits[1], 
               limits[2], 
               length.out = length(pal) + 1), 
                   all.inside = TRUE)]
}

col_pal &amp;lt;- rev(viridis_pal()(6))

all_rate &amp;lt;- top_20_sf %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  pull(rate) 

all_rate_0 &amp;lt;- 
  ifelse(all_rate &amp;lt; 0.005, 0, all_rate)

all_rate_6 &amp;lt;- cut_interval(all_rate_0, 
                           6, 
                           labels = F) 

percent_labs &amp;lt;- c(&amp;#39;0.0% to 10.1%&amp;#39;, 
  &amp;#39;10.1% to 20.2%&amp;#39;,
  &amp;#39;20.2% to 30.2%&amp;#39;,
  &amp;#39;30.2% to 40.3%&amp;#39;,
  &amp;#39;40.3% to 50.4%&amp;#39;,
  &amp;#39;50.4% to 60.5%&amp;#39;)

top_20_sf_leaf_map &amp;lt;- 
    leaflet(top_20_sf) %&amp;gt;% 
  addProviderTiles(&amp;quot;OpenStreetMap&amp;quot;) %&amp;gt;%
  addPolygons(color = &amp;#39;#C4C4C4&amp;#39;,
              fillColor  = 
                map2color(all_rate_6, 
                          col_pal), 
              fillOpacity = .85,
              weight = .55,
              popup = tooltip$tip, 
          opacity = 1
          )%&amp;gt;%
  addDrawToolbar(
    editOptions=editToolbarOptions(selectedPathOptions=selectedPathOptions())
  ) %&amp;gt;%
  addLegend(colors = col_pal, 
            labels = percent_labs, 
            opacity = 0.7,
            title = &amp;#39;Percent SNAP use&amp;lt;br&amp;gt;by census tract&amp;#39;,
    position = &amp;quot;bottomright&amp;quot;)

top_20_sf_leaf_map %&amp;gt;% 
  frameWidget(width = &amp;#39;100%&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/2020-07-29-u-s-food-deserts_files/figure-html//widgets/widget_unnamed-chunk-12.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Covid-19 and Rural Areas in the U.S.</title>
      <link>/post/covid-19-rural-deltanomics/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/covid-19-rural-deltanomics/</guid>
      <description>


&lt;div id=&#34;first-published-on-26-april-2020&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;First published on 26-April-2020&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&#34;last-updated-on-16-aug-2020&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Last updated on 16-Aug-2020&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Now that we are square in the middle of the Covid-19 pandemic, I thought it might be beneficial to look at some statistics associated with the number of cases.
We’ll differentiate our analysis by focusing on cases of Covid-19 in rural areas of the U.S.
There are a couple of reasons for this: mainly, rural analytics is my speciality, so while I don’t know much about the virus, I do know some about rural societies and economies; we can easily find pertinent data on rural counties; and, we can utilise some cool built-in R functions to help us along the way.
Before we go on it’s important to note that:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I am not a medical doctor or specialist in viral diseases.&lt;/li&gt;
&lt;li&gt;This post is meant to be a learning resource for people interested in looking at the pandemic from a rural perspective.&lt;/li&gt;
&lt;li&gt;Any potential interesting findings must be further investigated before any judgements can be made.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data&lt;/h1&gt;
&lt;p&gt;The data for this post comes from two places: Covid-19 cases from the &lt;a href=&#34;https://github.com/nytimes/covid-19-data&#34;&gt;New York Times github&lt;/a&gt;; and the &lt;a href=&#34;https://www.ers.usda.gov/data-products/rural-urban-continuum-codes/&#34;&gt;USDA Rural-Urban Classification Codes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Data scientists at The New York Times have been collating data on the number of cases of Covid-19 by county in the U.S..
It is available at their GitHub page, which means that one can easily access and update the data through &lt;em&gt;pull requests&lt;/em&gt;.
The data can also be downloaded and saved to a local drive.&lt;/p&gt;
&lt;p&gt;To get a rural understanding of Covid-19 cases, we’ll use the USDA data on rural-urban classification of U.S. counties, which can be downloaded using the hyperlink above.
Many countries have geographical classifications for rural and urban spaces.
Usually, a low-level geography is chosen that spans an entire country.
A continuum of rural-urban is used to describe each geographical area that goes from very urban to very rural (though not using those specific labels).&lt;/p&gt;
&lt;p&gt;So we’ll use those two datasets, join them together and investigate how many cases of Covid-19 are found in rural areas within the U.S..&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Analysis&lt;/h1&gt;
&lt;div id=&#34;libraries-and-themes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Libraries and themes&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Tidyverse&lt;/code&gt; packages will be used to do most of the heavy lifting.
We’ll do the data analysis using the &lt;code&gt;dplyr&lt;/code&gt; package, and we’ll do our plots with &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)
library(janitor)
library(scales)
library(cowplot)

# USDA Rural-Urban classification codes


post_theme &amp;lt;- function(...) {
  theme(
    text = 
      element_text(
        color = &amp;#39;black&amp;#39;,
         family = &amp;#39;serif&amp;#39;),
    axis.text = 
      element_text(
        color = &amp;#39;black&amp;#39;),
    axis.text.x = 
      element_text(angle = 45, 
                   hjust = 1),
    panel.background = 
      element_blank(),
    axis.line.x = 
      element_line(
        color = &amp;#39;black&amp;#39;),
    axis.ticks = element_blank(),
    plot.margin = margin(.75, .75, .75, .75, &amp;#39;cm&amp;#39;),
    plot.caption = 
      element_text(hjust = 0,
                                face = &amp;quot;italic&amp;quot;),
    plot.title = 
      element_text(
        face = &amp;#39;bold&amp;#39;),
    plot.subtitle = 
      element_text(face = &amp;#39;bold&amp;#39;),
    plot.title.position = &amp;quot;plot&amp;quot;,
    plot.caption.position =  &amp;quot;plot&amp;quot;, 
    strip.background = 
      element_blank(), 
    strip.text = 
      element_text(
        face = &amp;#39;bold&amp;#39;)
  ) +
    theme(...) # this bit allows us to make changes using this same function instead of calling two theme functions.
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# I created a new R-project to house the Covid-19 data in my Documents directory. 
covid_county &amp;lt;- read_csv(&amp;#39;~/Documents/R/covid-19-data/us-counties.csv&amp;#39;)

# Pull in the USDA data from a directory I created in my cloud storage.
rural_urban &amp;lt;-
  read_csv(&amp;#39;~/OneDrive - SRUC/Data/usda/ruralurbancodes2013.csv&amp;#39;) %&amp;gt;%
  select(fips,
         rucc_2013,
         desc = description)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we’ve got the data loaded from Covid-19 and USDA Rural-Urban Classifications, we are going to use some of R’s base functionality.
R has two functions that help with general data analysis and joins: &lt;code&gt;state.name&lt;/code&gt;, which has all 50 U.S. state names; and, &lt;code&gt;state.region&lt;/code&gt;, which has the 50 U.S. state’s categorised into geographical regions.&lt;br /&gt;
We’ll use these two functions in a &lt;code&gt;tibble&lt;/code&gt; to help join the Covid-19 data with the Rural-Urban Classifications.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;state_region &amp;lt;-
  tibble(state = state.name,
         region = state.region)

covid_region &amp;lt;-
  covid_county %&amp;gt;%
  left_join(rural_urban,
            by = &amp;#39;fips&amp;#39;) %&amp;gt;%
  left_join(state_region,
            by = &amp;#39;state&amp;#39;) %&amp;gt;%
  mutate(week =  
           floor_date(date,
                      &amp;#39;week&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have our working data frame called &lt;code&gt;covid_region&lt;/code&gt;. It has the following variable names: date, county, state, fips, cases, deaths, rucc_2013, desc, region, week.
We’ll use the &lt;code&gt;description&lt;/code&gt; variable to filter out rural counties only.
There are two classifications of rural areas - those that are adjacent to more metro places and those that are not.
Those that are not adjacent to metro areas are adjacent to other rural areas, which makes them somewhat more remote, as people living there need to travel further to get to service centres.&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;group_by&lt;/code&gt;/&lt;code&gt;summarise&lt;/code&gt; functionality from &lt;code&gt;dplyr&lt;/code&gt; to find the sum of Covid-19 cases and deaths by each week, region and for both rural classifications.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weekly_regions &amp;lt;- covid_region %&amp;gt;%
  filter(str_detect(desc,
                    &amp;#39;rural&amp;#39;)) %&amp;gt;% 
  group_by(week, region, desc) %&amp;gt;%
  summarise(cases =
              sum(cases, na.rm = T),
            deaths =
              sum(deaths, na.rm = T)) %&amp;gt;%
  ungroup() %&amp;gt;%
  gather(key,
         value,-c(week,
                  region,
                  desc)) %&amp;gt;% 
  drop_na()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re going to make a fancy-looking plot for this post, something that you might like to share on social media or include in a work report.
To help clean up the plot a bit, we’ll use a few approaches that are laid out in the code below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# each label for the x-axis which we&amp;#39;ll use to make some nice looking data labels.
week_n &amp;lt;- weekly_regions %&amp;gt;% 
  count(week) %&amp;gt;% 
  pull(week)

##------ Wed Jul 29 21:41:05 2020 ------##
# added this to clean up the x-axis
month_n &amp;lt;- week_n %&amp;gt;% 
  floor_date(&amp;#39;month&amp;#39;) %&amp;gt;% 
  unique()

# we&amp;#39;ll use scale_color_manual with our own color choice 
col_v &amp;lt;- c(&amp;#39;#3E4A89FF&amp;#39;, &amp;#39;#FDE725FF&amp;#39;)
names(col_v) &amp;lt;- unique(weekly_regions$desc)

# a simple label_wrap function for the legend
label_wrap &amp;lt;- function(x, n = 25){
  paste0(str_wrap(x, n), &amp;#39;\n&amp;#39;)
}

# date labels that use drops today&amp;#39;s date into the caption of the plot.
today_date &amp;lt;- 
  as_date(Sys.time()) %&amp;gt;% 
  format(&amp;#39;%d %B, %Y&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, now we’ll create the main &lt;code&gt;ggplot&lt;/code&gt; that uses &lt;code&gt;facet_wrap&lt;/code&gt; to look at each region in the U.S. over time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weekly_regional_gg &amp;lt;- 
  weekly_regions %&amp;gt;%
  filter(key == &amp;#39;cases&amp;#39;) %&amp;gt;% 
  ggplot(aes(week, 
         value, 
         group = desc)) +
  geom_line(size = 1.25, 
            aes(color = desc))+
  geom_point(size = 4, 
             color = &amp;#39;grey90&amp;#39;)+
  geom_point(size = 3.5, 
             aes(color = desc))+
  scale_x_date(breaks = month_n, 
               date_labels = &amp;#39;%d-%b&amp;#39;)+
  scale_y_continuous(labels = comma) +
  scale_color_manual(
    values = col_v, 
    labels = label_wrap,
    name = &amp;#39;Rural classification&amp;#39;)+
  facet_wrap( ~ region) +
  post_theme()+
  labs(caption = &amp;#39;Severe drop-offs may indicate that data was most recently updated earlier in the week.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we’ll add the labels and annotations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(weekly_regional_gg &amp;lt;- 
  weekly_regional_gg +  
  labs(
    title = &amp;#39;Weekly Total U.S. COVID-19 Cases by Region in Rural Counties&amp;#39;,
    subtitle = &amp;#39;SOURCE: The New York Times, based on reports from state and local health agencies &amp;amp;\nThe USDA Rural-Urban Continuum Codes (2013).&amp;#39;,
    x = &amp;#39;\nWeek of&amp;#39;,
    y = &amp;#39;Total&amp;#39;,
    color = str_wrap(&amp;#39;USDA Rural-Urban Continuum Codes (2013)&amp;#39;, 25), 
    caption = str_c(&amp;#39;By Elliot Meador, PhD; @Elliot_Meador\nNOTE: Last week may not yet be complete.\nProduced &amp;#39;, today_date)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-26-covid-19-and-rural-areas-in-the-u-s_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It looks as though rural counties in the south are reporting more cases than the rest of the U.S..
It’s worth investigating the southern counties to see if one state/county is pulling the statistics higher for the entire region, or if the trend is true for the majority of counties.
There are a few ways to do this, but the most straightforward is to replicate the plot above but for southern states only.
The code below does this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;southern_rural_cases &amp;lt;- covid_region %&amp;gt;% 
  filter(str_detect(desc, &amp;#39;rural&amp;#39;), 
         region == &amp;#39;South&amp;#39;) %&amp;gt;% 
  group_by(week, state, desc) %&amp;gt;% 
  summarise(total = sum(cases, na.rm = T)) %&amp;gt;% 
  ungroup() 

viridis &amp;lt;- scales::viridis_pal()

southern_state &amp;lt;- southern_rural_cases %&amp;gt;% 
  count(state) %&amp;gt;% 
  pull(state)

state_cols &amp;lt;- viridis(length(southern_state))

names(state_cols) &amp;lt;- southern_state


labels_df &amp;lt;- southern_rural_cases %&amp;gt;% 
  group_by(state, desc) %&amp;gt;% 
  filter(week == max(week)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(desc = str_wrap(desc, 35))

weeks_lab &amp;lt;- southern_rural_cases %&amp;gt;% 
  count(week) %&amp;gt;% 
  pull(week)

southern_plot &amp;lt;- southern_rural_cases %&amp;gt;% 
  mutate(desc = str_wrap(desc, 35)) %&amp;gt;% 
  ggplot(aes(week, total, group = state))+
  geom_line(aes(color = state), 
            show.legend = F)+
  geom_point(color = &amp;#39;white&amp;#39;, 
             size = 2.25)+
  geom_point(aes(color = state), 
             size = 2, 
             show.legend = F)+
  geom_text(data = labels_df, 
            aes(label = state, 
                x = week, 
                y = total, 
                color = state),
            size = 2, 
            hjust = 0,
            nudge_x = 1.25,
            check_overlap = T,
            show.legend = F)+
  scale_x_date(breaks = weeks_lab, 
               date_labels = &amp;#39;%b-%d&amp;#39;)+
  scale_color_manual(values = state_cols)+
  scale_y_log10(labels = comma)+
  facet_grid(~desc)+
  coord_cartesian(clip = &amp;#39;off&amp;#39;)+
  post_theme(plot.margin = margin(1.25, 
                                  1.25, 
                                  1.25, 
                                  1.25, &amp;#39;cm&amp;#39;),
             panel.spacing = unit(2, &amp;quot;lines&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And just like above, we’ll add our labels seperate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(southern_plot_ii &amp;lt;- southern_plot+
  labs(title = &amp;#39;Comparing Covid-19 Cases Across Rural Counties in the Southern U.S.&amp;#39;, 
       subtitle = &amp;#39;SOURCE: The New York Times, based on reports from state and local health agencies &amp;amp;\nThe USDA Rural-Urban Continuum Codes (2013).&amp;#39;,
       x = &amp;#39;Week of&amp;#39;, 
       y = &amp;#39;Total\nLog10-scale&amp;#39;, 
       caption = str_c(&amp;#39;By Elliot Meador, PhD; @Elliot_Meador\nNOTE: Last week may not yet be complete.\nProduced &amp;#39;, today_date)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-26-covid-19-and-rural-areas-in-the-u-s_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;county-level-analysis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;County-level analysis&lt;/h1&gt;
&lt;p&gt;In the above analysis, we are showing aggregate statistics across states.
This gives a good overall understanding of high-level trends, but the next step is to look a bit closer at what happens at a more granular level.
Let’s take a look at all rural counties in the U.S. and plot the total cases by the total deaths - which is a common plot I’ve found online.&lt;/p&gt;
&lt;p&gt;We’ll only look at rural counties that have at least 10 recorded cases.
We’re going to do a twist on a standard scatterplot, where we plot the state abbreviation of the county instead of a simple point.
We’ll also colour all abbreviations of the same state in the same colour; this will help draw the readers’ eye to similar states.
Lastly, we won’t have a colour legend as this many states will lead to a massive legend that will overpower the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;covid_county_rural &amp;lt;- covid_county %&amp;gt;%
  left_join(rural_urban,
            by = &amp;#39;fips&amp;#39;) %&amp;gt;% 
  filter(str_detect(desc, &amp;#39;rural&amp;#39;)) %&amp;gt;% 
  select(-date, -county, -rucc_2013) %&amp;gt;% 
  group_by(fips) %&amp;gt;% 
  mutate(tot_deaths = sum(deaths, na.rm = T), 
         tot_cases = sum(cases, na.rm = T)) %&amp;gt;%   ungroup() %&amp;gt;% 
  filter(tot_cases &amp;gt; 10, 
         tot_deaths &amp;gt; 1) %&amp;gt;% # must have at least 10 cases
  select(-cases, -deaths) %&amp;gt;% 
  distinct(fips, .keep_all = T)
  

plot_states &amp;lt;- covid_county_rural %&amp;gt;% 
  distinct(state) %&amp;gt;% 
  pull()

state_cols &amp;lt;- 
  sample(viridis_pal()(length(plot_states)))


names(state_cols) &amp;lt;-  sample(plot_states)


update_date_anno &amp;lt;- paste(&amp;#39;Data updated on&amp;#39;,
      format(max(covid_county$date), &amp;#39;%d-%b-%Y&amp;#39;))

rural_point_plot &amp;lt;- covid_county_rural %&amp;gt;% 
  left_join(tibble(state = state.name, 
                   abb = state.abb)) %&amp;gt;% 
  ggplot(aes(tot_cases, 
             tot_deaths))+
  geom_text(aes(label = abb, 
                color = state), 
            size = 5,
            show.legend = F)+
  scale_x_log10(labels = comma)+
  scale_y_log10(labels = comma)+
  scale_fill_manual(values = state_cols)+
  scale_color_manual(values = state_cols)+
  post_theme()+
  labs(title = &amp;#39;Comparing Covid-19 Cases and Deaths Across Rural Counties in the U.S.&amp;#39;, 
       subtitle = &amp;#39;SOURCE: The New York Times, based on reports from state and local health agencies &amp;amp;\nThe USDA Rural-Urban Continuum Codes (2013).&amp;#39;, 
       x = &amp;#39;Total Cases&amp;#39;, 
       y = &amp;#39;Total Deaths&amp;#39;, 
       caption = paste0(&amp;#39;Only counties shown with more than 10 cases and at least 1 death recorded.\nNOTE:Horizontal and vertical axes are on log10 scales.\n&amp;#39;,update_date_anno))



rural_point_plot +
  theme(text = element_text(size = 15))+
  annotate(&amp;#39;label&amp;#39;, 
           x = 5000, 
           y = 5, 
    label = str_wrap(&amp;#39;Letters are state abbreviations. Each pair represents a different county within the listed state. State abbreviations are consistently colored.&amp;#39;, 40), 
    size = 3.5, 
    family = &amp;#39;serif&amp;#39;, 
    hjust = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-26-covid-19-and-rural-areas-in-the-u-s_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;key-findings&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Key Findings&lt;/h1&gt;
&lt;p&gt;It looks like, at least on the surface of things, that rural places in southern counties report more Covid-19 cases than other rural counties across the U.S..
When we investigated this further by breaking down the states within the southern category, we can see that there is somewhat even spread.
That is, one state is not pulling the rest along, which could obscure the actual trend.&lt;/p&gt;
&lt;p&gt;I’m from the south-east of the U.S. (Mississippi), and I can say with some certainty that Mississippi, Alabama and Georgia have quite high levels of poverty and ill-health that usually accompanies poverty in the U.S..
It is interesting to see these states reporting higher levels of Covid-19, and it begs the question, “Is there an association between poorer rural places and higher levels of reported cases?”
Statistically, I think there probably is (though this needs testing).
Even if it is found to be statistically correlated, we still won’t know &lt;strong&gt;&lt;em&gt;why&lt;/em&gt;&lt;/strong&gt; we’re seeing these trends until we do more qualitative work in the region to pair with our quantitative findings.&lt;/p&gt;
&lt;p&gt;Thanks to the hard work of the folks at the New York Times, we can update our findings over time to see if the trends hold. So stay tuned!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Be like me - looping through shortest distance analysis</title>
      <link>/post/sna/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/sna/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I’ve been doing some work lately on social networks that exist between organisations or institutions.
This is nice as it builds on some of my dissertation work, and I generally find it quite interesting.
Networks that form between organisations are often quite powerful, in that they can illustrate where strong areas of like-minded work exist or where new connections might be useful in strengthing one organisation’s influence.&lt;/p&gt;
&lt;div id=&#34;why-like-me&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why like me?&lt;/h2&gt;
&lt;p&gt;Organisational ties – like personal relationships in business – can be extremely valuable to a firm’s bottom line.
These ties are often leveraged and manoeuvred to produce some sought-after result.
A few examples might be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do I know anyone at Organisation X who might have more information about some big grant schemed about to be launched?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Who in my inner circle has ties to a business who might provide some venture capital for an idea I have?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The notion of leverage’s one’s networks is nothing new. It’s known as &lt;strong&gt;&lt;em&gt;social capital&lt;/em&gt;&lt;/strong&gt; theory in sociology and is a well-known tactic taught in business schools.
Its applications are too big to get into in this blog post.
I’d suggest taking a look at this &lt;a href=&#34;https://www.forbes.com/sites/forbescoachescouncil/2018/11/27/two-ways-to-leverage-relationships-for-your-business-goals/#672d29eaa0cc&#34;&gt;Forbes&lt;/a&gt; article for a bit more information on why this might benefit you.
If you’re interested in leveraging one’s ties for their benefit from an academic perspective you can read some of my published articles or read works by James Coleman, Pierre Bourdeau or Robert Putnam from the 1980s and 1990s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-nitty-gritty&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The nitty-gritty&lt;/h1&gt;
&lt;div id=&#34;some-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Some data&lt;/h2&gt;
&lt;p&gt;Now that we know it’s a worthwhile venture to leverage one’ network ties, let’s take a closer look at how we might approach this from a data perspective.
We’ll use a portion of the mock data we created in an earlier blog found &lt;a href=&#34;https://www.thedeltanomics.com/post/networks-from-survey-data-creating-mock-data/&#34;&gt;here&lt;/a&gt;.
The database created from the code in that blog post is called &lt;code&gt;create_sna_data&lt;/code&gt;, and we’ll be using it for the rest of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-what-were-looking-for&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Finding what we’re looking for&lt;/h2&gt;
&lt;p&gt;We’re going to be preforming shortest-distance analysis.
Shortest distance analysis, also known as shortest paths, is a common algorithm used anytime objects are found within a network.
It’s common in logistics work, especially regarding travel along a road or rail network.
GIS analysis uses this approach as well.
A great example is the Scottish Index of Multiple Deprivation’s use of shortest-distance analysis in looking at access as a form of deprivation in Scotland.
Take a look at the SIMD documentation &lt;a href=&#34;https://statistics.gov.scot/data/scottish-index-of-multiple-deprivation---geographic-access-to-services-indicators&#34;&gt;here&lt;/a&gt; for an overview.&lt;/p&gt;
&lt;p&gt;According to igraph’s documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… [shortest distance] calculates the length of all the shortest paths from or to the vertices in the network. [It] calculates one shortest path (the path itself, and not just its length) from or to the given vertex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s use the shortest distance function from tidygraph (which implements igraph’s &lt;code&gt;shortest.paths&lt;/code&gt; functionality) using a straight forward approach.&lt;/p&gt;
&lt;p&gt;Below let’s look at the shortest distance between two nodes.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;First, we’ll create a base layout from which to filter for sub-graphs when we want to show a path between two nodes.&lt;/li&gt;
&lt;li&gt;Then, we’ll plot the graph using &lt;code&gt;ggraph&lt;/code&gt;. &lt;code&gt;ggraph&lt;/code&gt; likes the layout matrices to be in &lt;code&gt;tibble&lt;/code&gt; form with the column names &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a filtering column called id.
create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  mutate(id. = row_number())

# use the layout with stress algorythm to create a layout
layout_df &amp;lt;- create_sna_data %&amp;gt;% 
  layout_with_stress() %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  set_names(c(&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;) )


## And now the plot
create_sna_data %&amp;gt;% 
  ggraph(layout = layout_df)+ # our layout algorythm from above
  geom_edge_fan(start_cap = circle(2, &amp;#39;mm&amp;#39;), 
                end_cap = circle(2, &amp;#39;mm&amp;#39;))+
  geom_node_point(size = 4)+
  geom_node_text(aes(label = id.), 
                 size = 2.25, 
                 color = &amp;#39;white&amp;#39;)+
  labs(title = &amp;#39;Full network&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we’ll find the shortest path between two nodes: 75 and 4.
We’ll plot the shortest path as a network and lay it on top of the network above so we can visualise the path within the network.
To do this, we’ll calculate the layout tibble first and filter it for the shortest paths network using the &lt;code&gt;layout_with_stress&lt;/code&gt;function from the &lt;code&gt;graphlayouts&lt;/code&gt; package.
Note that we’ll need to pull our nodes that sit along the shortest path from our layout data frame.
We’ll use the &lt;code&gt;slice&lt;/code&gt; function in &lt;code&gt;dplyr&lt;/code&gt; for this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_sna_data_4_75 &amp;lt;- 
  create_sna_data %&amp;gt;%
  morph(to_shortest_path, 75, 4) %&amp;gt;% 
  mutate(selected_node = T) %&amp;gt;% 
    activate(edges) %&amp;gt;% 
    mutate(selected_edge = T) %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
    unmorph()

colors_v &amp;lt;- c(&amp;#39;tomato&amp;#39;, 
  &amp;#39;skyblue&amp;#39;)

names(colors_v) &amp;lt;- 
  c(&amp;#39;TRUE&amp;#39;, &amp;#39;Other&amp;#39;)


create_sna_data_4_75 %&amp;gt;% 
  mutate(selected_node = ifelse(
    is.na(selected_node), &amp;#39;Other&amp;#39;, selected_node
  )) %&amp;gt;% 
  activate(edges) %&amp;gt;% 
  mutate(selected_edge = ifelse(
    is.na(selected_edge), &amp;#39;Other&amp;#39;, selected_edge
  )) %&amp;gt;% 
  ggraph(layout = layout_df)+
  geom_edge_fan(aes(color = selected_edge),
                start_cap = circle(2, &amp;#39;mm&amp;#39;), 
                end_cap = circle(2, &amp;#39;mm&amp;#39;))+
  geom_node_point(aes(color = selected_node),
                  size = 4)+
  geom_node_text(aes(label = id.), 
                 size = 2.5, 
                 color = &amp;#39;white&amp;#39;)+
  scale_color_manual(values = colors_v, 
                     name = &amp;#39;Nodes&amp;#39;, 
                     label = c(&amp;#39;Other&amp;#39;, 
                               &amp;#39;Shortest path&amp;#39;))+
  scale_edge_color_manual(values = colors_v, 
                     name = &amp;#39;Edges&amp;#39;, 
                     label = c(&amp;#39;Other&amp;#39;, 
                               &amp;#39;Shortest path&amp;#39;))+
  labs(title = &amp;#39;Shortest path between nodes 75 and 4&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;leveraging-networks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Leveraging networks&lt;/h2&gt;
&lt;p&gt;The notion of leveraging networks comes from the reality that not every node in a network is available to us to draw resources from.
For the most part, a node has a useable relationship with only those nodes in its inner circle – or its one-degree neighbourhood.
Now, this isn’t always the case, but as a very general rule with SNA, the further one node is from another, the less influence they have on one another. SNA can help identify which people could put you in touch with some other person based on a set of pre-defined criteria.
SNA helps answer the question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do I know a dude who knows a dude?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;the-goal&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The goal&lt;/h3&gt;
&lt;p&gt;So let’s suppose our goal is to utilise our social network to find a potential partner to work on a grant with us.
The funder of our grant scheme has a real soft spot for loners – i.e. one-degree nodes; maybe because before our funder made it big they used to be a one-degree node themselves.
&lt;strong&gt;&lt;em&gt;Who knows!&lt;/em&gt;&lt;/strong&gt;
Below we see our same network with the one-degree nodes highlighted.
&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We’ll pretend that we are &lt;strong&gt;&lt;em&gt;Le, Brianna&lt;/em&gt;&lt;/strong&gt; (# 87), one of the most well-connected persons in the network (with a betweenness score of 3,088).&lt;/p&gt;
&lt;p&gt;We know that we want to partner with a node that has only-degree.
We will want to approach as many one-degree nodes as possible, as some will turn us down or might not be available to partner on the grant application.&lt;/p&gt;
&lt;p&gt;We also know that we get along with some people better than others and that we’ll have to depend on our relationships to help leverage them.
It may sound crazy, but &lt;strong&gt;&lt;em&gt;Le, Brianna&lt;/em&gt;&lt;/strong&gt; (ourself) gets along really well with &lt;em&gt;people who buy all their food from farmers markets&lt;/em&gt;.
So, we’ll use this to our advantage by trying to find as many shortest paths to single-degree nodes that are filled with nodes that buy all their meals at farmers markets.
We’ll do this with iterative programming otherwise known as &lt;strong&gt;&lt;em&gt;looping&lt;/em&gt;&lt;/strong&gt;.
Therefore, our approach is:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Assign a numeric scoring value for the column &lt;code&gt;buy_farm_mark&lt;/code&gt;, with more meals receiving a higher score; geodesic distance will also be factored into the score, with nodes further away receiving a higher score.&lt;/li&gt;
&lt;li&gt;Identify all shortest paths between Le, Brianna and all one-degree nodes in the network.&lt;/li&gt;
&lt;li&gt;Create a scaled score for each path that we can use to decide on who to contact first for partnering on the grant application.&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;step-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Step 1&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Those who buy every meal from the farmers 
# market get a score of 5, 3 for most meals
# and 0 for hardly any meals.  We&amp;#39;ll create 
# a tibble and merge it with data frame. 
farm_buy_n &amp;lt;- 
  tibble(buy_farm_mark = c(&amp;#39;Every meal&amp;#39;, 
                           &amp;#39;Most meals&amp;#39;, 
                           &amp;#39;Hardly any meals&amp;#39;), 
        farm_mark_score = c(5, 3, 0))


create_sna_data_updated &amp;lt;- 
  create_sna_data_updated %&amp;gt;% 
  left_join(farm_buy_n, 
            by = &amp;quot;buy_farm_mark&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Step 2&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get all one-degree node 
one_degree_names &amp;lt;- names(
  which(
    degree(
      create_sna_data_updated) == 1))

# and pull out their names.
one_degree_ids &amp;lt;- 
  which(
    V(create_sna_data_updated)$name %in% 
      one_degree_names)

# Find the max betweeness for the starting node.
max_degree &amp;lt;- which(
  betweenness(
    create_sna_data_updated) == max(
      betweenness(
        create_sna_data_updated)))[1]

## The loop!!
## 
all_shortest_one_degre_paths_ls &amp;lt;- 
  map(one_degree_ids, # our one-degree nodes are here
      function(x){
        
create_sna_data_updated %&amp;gt;% 
          
  morph(to_shortest_path, max_degree, x) %&amp;gt;% 
          mutate(selected_node = TRUE) %&amp;gt;% 
          activate(edges) %&amp;gt;% 
          mutate(selected_edge = TRUE) %&amp;gt;% 
          activate(nodes) %&amp;gt;% 
  unmorph()
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Step 3&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create the scores and flatten the list
# into a numeric vector that we can use to 
# subset by.

all_scores &amp;lt;- 
  all_shortest_one_degre_paths_ls %&amp;gt;%
  map(function(x){
    x %&amp;gt;% 
  filter(selected_node) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  summarise(total_farm = sum(farm_mark_score), 
            n = n(), 
            total_score = total_farm / n) %&amp;gt;% 
  pull(total_score)
  }) %&amp;gt;% 
  flatten_dbl()
  
highest_score &amp;lt;- 
  which(all_scores == max(all_scores))[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now let’s take a look at the final results.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;Let’s plot our final results using the code below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;color_v_iii &amp;lt;- c(&amp;#39;#084081&amp;#39;, 
                 &amp;#39;#A8DDB5&amp;#39;)
names(color_v_iii) &amp;lt;- c(T, &amp;#39;Other&amp;#39;)

highest_score_g &amp;lt;- all_shortest_one_degre_paths_ls[[
  highest_score]] %&amp;gt;% 
  mutate(selected_node = ifelse(is.na(selected_node), &amp;#39;Other&amp;#39;, selected_node)) %&amp;gt;% 
  activate(edges) %&amp;gt;% 
  mutate(selected_edge = ifelse(is.na(selected_edge), &amp;#39;Other&amp;#39;, selected_edge)) 

highest_score_g %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
    mutate(buy_farm_mark = factor(buy_farm_mark, levels = c(&amp;#39;Every meal&amp;#39;, 
           &amp;#39;Most meals&amp;#39;, 
           &amp;#39;Hardly any meals&amp;#39;))) %&amp;gt;% 
    ggraph(layout = layout_df)+
    geom_edge_fan(aes(color = selected_edge))+
    geom_node_point(aes(color = selected_node, 
                        shape = buy_farm_mark), 
                    size = 3)+
  scale_color_manual(values = color_v_iii, 
                     &amp;#39;Node path&amp;#39;, 
                     labels = c(&amp;#39;Other&amp;#39;, 
                                &amp;#39;Highest score&amp;#39;
                                ))+
  scale_edge_color_manual(values = color_v_iii, 
                          &amp;#39;Edge path&amp;#39;, 
                     labels = c(&amp;#39;Other&amp;#39;, 
                                &amp;#39;Highest score&amp;#39;
                                ))+
  scale_shape(&amp;#39;Meals bought from\nfarmers market&amp;#39;)+
  labs(title = &amp;#39;Highest scoring-paths graph&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;
We can see that our approach to identifying the most appropriate project partner favours those nodes that eat every meal with food bought from the farmers market.
Of course, this is just a demonstration of how looping can be used with network analysis to find optimum routes within a network.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Networks from survey data: Creating mock data</title>
      <link>/post/networks-from-survey-data-creating-mock-data/</link>
      <pubDate>Fri, 27 Mar 2020 16:25:07 +0000</pubDate>
      <guid>/post/networks-from-survey-data-creating-mock-data/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;why-create-a-new-dataset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Why create a new dataset?&lt;/h1&gt;
&lt;p&gt;I’d like to do a series of posts looking at social network analysis using primary data (i.e. data collected by yourself.).
There are a lot of different examples of when you might want to use a survey to collect data for use in analysing social networks.
But that’s for another time.&lt;/p&gt;
&lt;p&gt;The purpose of this post is to create a new dataset that can be used in practising social network analysis in future posts.
Creating a new dataset in R has a lot of useful advantages.
The biggest advantage is that we will have a single dataset that can be used in all future examples when learning SNA with surveys.&lt;/p&gt;
&lt;p&gt;Creating a new dataset is also a great learning opportunity because we will &lt;em&gt;reverse engineer&lt;/em&gt; a dataset around specific modelling, correlations and otherwise interesting easter-eggs that we can use as learning opportunities in future posts.
We will rely on the power of probability statistics to help us get there.
And as we make decisions about how to structure our dataset, we’ll learn some important aspects of social network analysis and general data science.
We’ll save this for the end though.
So, let’s get started!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;building-a-new-dataset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Building a new dataset&lt;/h1&gt;
&lt;p&gt;As with most posts on Deltanomics, we’ll use a tidy framework. So, that means loading &lt;code&gt;tidyverse&lt;/code&gt;, and we’ll go ahead and load our other SNA workhorse packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# For a tidy framework
library(tidyverse)
library(glue)
library(scales)

# Our graphing libraries
library(igraph)
library(tidygraph)
library(ggraph)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;an-edgelist&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An edgelist&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is create an &lt;a href=&#34;https://en.wikipedia.org/wiki/Edge_list&#34;&gt;edgelist&lt;/a&gt; structure in our data.
Really anything can be used as an edgelist as it’s just two columns that represent an edge is meant to be drawn between adjacent cells.
A typical use of surveys in SNA is to look at how information flows between two people and the influence that the information has on sustainable behaviours.
So let’s create two columns that would reasonably collect that type of information.&lt;/p&gt;
&lt;div id=&#34;respondent-name&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Respondent name&lt;/h3&gt;
&lt;p&gt;First, we need a column for the respondent’s name or identification.
This column length will be the first and primary argument in our function to allow us to create datasets of any size we choose.&lt;/p&gt;
&lt;p&gt;For this, let’s use one of my favourite packages &lt;code&gt;randomNames&lt;/code&gt; to generate some realistic names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(randomNames)

create_sna_data &amp;lt;- 
tibble( # let&amp;#39;s pull 100 random names to start
    resp_name = randomNames(100,
                  which.names = &amp;#39;both&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;information-holder&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Information holder&lt;/h3&gt;
&lt;p&gt;Next, we’ll create a column that holds the name of whom the respondent goes to for information.
We want our social network to be &lt;em&gt;complete&lt;/em&gt;; meaning that every node in the graph will attribute data.
To ensure this happens, we need to take special care that all of the possible nodes are also respondents.
In short, the second column of the edgelist needs to be completely contained within the first.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 1. Make a disconnect graph
g &amp;lt;- make_empty_graph() %&amp;gt;% 
  add_vertices(2)

# 2. Run a while loop to ensure that a connected
# graph is created -- this will help smooth over some of the graphing functions for later. 
# 
while (is.connected(g)== FALSE) {

  g &amp;lt;- create_sna_data %&amp;gt;% 
    mutate(info_one = sample(
      sample(resp_name, 80), # create 2nd column
      nrow(.), T)) %&amp;gt;%       # as subset of the
    as_tbl_graph()           # first.
}

# send it back to the original name
create_sna_data &amp;lt;-  g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s take a look at how the social network contained within the data looks like.
&lt;img src=&#34;/post/2020-03-27-networks-from-survey-data-creating-mock-data_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;960&#34; /&gt;
The network should loosely resemble a sparsely connected sociogram, and it should serve our purposes well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;node-edge-attributes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Node &amp;amp; edge attributes&lt;/h2&gt;
&lt;p&gt;Now that we have our edge list as the first two columns of the data set, we can start to add some node and edge attributes. However, we can’t just randomly create new variables and values because we want a dataset that resembles what we might find in the real world. This means certain variables should be related or correlated with one another. And, because we’re interested in network analysis, a node’s position in the network should also influence their values in key columns. To achieve this, we’ll need to &lt;em&gt;reverse&lt;/em&gt; engineer the values based on some graph analysis.&lt;/p&gt;
&lt;div id=&#34;node-attributes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Node attributes&lt;/h3&gt;
&lt;p&gt;We’ll do some rapid-fire node correlations with some key socio-economic variables.&lt;/p&gt;
&lt;div id=&#34;income-category&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Income category&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  mutate(income_pre_tax = map_chr(degree(create_sna_data), function(x){
  
    # random normal using degree as the mean
    # and a standard deviation of 2.5
    random_norm &amp;lt;- rnorm(n = 1, 
        mean = x, 
        sd = sample(2.5, 1, F))
  
  dollar(abs(random_norm)*15000, 
         prefix = &amp;#39;£&amp;#39;)
}))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our dataset has a lot of randomness to it, so it’s impossible to tell what the correlation is. But, it should at least be positive and somewhat linear. There aren’t likely to be many nodes that have the maximum number of degrees, so the variance should drop off as the degree increases (but this isn’t a guarantee!).&lt;/p&gt;
&lt;p&gt;A boxplot of showing degree and income is shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-27-networks-from-survey-data-creating-mock-data_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;
So, the theoretical people in our dataset with more connections to others should make more money, something that, could conceivably be true.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;neighbourhood-influence&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Neighbourhood influence&lt;/h4&gt;
&lt;p&gt;A common question in network analysis is: do nodes behave differently when they are connected to certain nodes. It’s like the old adage ~ &lt;em&gt;if you lie down with dogs you’ll get up with fleas&lt;/em&gt;. For this, we’ll pick out some random nodes and have their neighbourhoods adopt a similar value for a question like: do you buy the majority of your fruit and veg from a farmers market?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;influencers_df &amp;lt;- map_df(1:10, function(x){

  # pull a random node name
node. &amp;lt;- sample(V(create_sna_data)$name, 1)

  # get the node id, because to_local_neighborhood requires a numeric identifier (this is due to igraph).

 node_id. &amp;lt;- match(node., V(create_sna_data)$name)
  
 # pull the neighbourhoods of each node from above. 
neighbours. &amp;lt;- create_sna_data %&amp;gt;% 
  to_local_neighborhood(node = node_id., 
                        order = 1) %&amp;gt;% 
    .[[1]] %&amp;gt;% 
    as_tibble() %&amp;gt;% 
    pull(name)

 # create a tibble of both values for use in the next step

tibble(neighours. = neighbours.,
       centre = rep(node., length(neighbours.)))

}) 
# create new variable for each value returned above.

create_sna_data &amp;lt;- 
  create_sna_data %&amp;gt;% 
  mutate(buy_farm_mark = case_when(
    name %in% influencers_df$centre ~ &amp;#39;Every meal&amp;#39;,
    name %in% influencers_df$neighours. ~ &amp;#39;Most meals&amp;#39;,
    T ~ &amp;#39;Hardly any meals&amp;#39;
  ), 
  buy_farm_mark = factor(buy_farm_mark, 
                            levels = c(&amp;#39;Every meal&amp;#39;, 
                                       &amp;#39;Most meals&amp;#39;, 
                                       &amp;#39;Hardly any meals&amp;#39;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was a bit verbose and somewhat complicated, but it will be worth it. Let’s take a look below to see how it looks in our new data.
&lt;img src=&#34;/post/2020-03-27-networks-from-survey-data-creating-mock-data_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;community-influence&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Community influence&lt;/h4&gt;
&lt;p&gt;We’ll use a community detection algorithm for the last node attribute for our dataset. This one is a bit easier as we’ll just create a new variable using the &lt;code&gt;group_infomap&lt;/code&gt; function from &lt;code&gt;tidygraph&lt;/code&gt;/&lt;code&gt;igraph&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  to_undirected() %&amp;gt;% 
  mutate(cows_on_farm = 
           as.factor(group_infomap()))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The plot below illustrates the communities detected by &lt;code&gt;group_infomap&lt;/code&gt;. The only thing we’ve done here is to rename the variable. Easy enough!
&lt;img src=&#34;/post/2020-03-27-networks-from-survey-data-creating-mock-data_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We’ll now add edge attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;edge-attributes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Edge attributes&lt;/h3&gt;
&lt;p&gt;Edge attributes won’t be as complicated as node attributes for as we’ve aleady identified the relationship between nodes (edges). We’ll just need to think about a variable that would makes sense for trustful communities. One could be that number of cows is related to higher levels of trust (not super likely in the real world, but anything’s possible!). It’s an easy edge attribute to calculate so let’s do that one.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  mutate(trust_score = round(
              rescale(
              as.numeric(cows_on_farm), 
              c(1, 10))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;back-to-a-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Back to a tibble&lt;/h2&gt;
&lt;p&gt;We’ve been workig with a &lt;code&gt;tidygraph&lt;/code&gt; object for most the post. We’ll want to create a &lt;code&gt;tibble&lt;/code&gt; for our purposes. Remember, the goal is to create a mock survey dataset that we can use in the future to learn SNA. So it should look authentic. Let’s do that now.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;name_id_df &amp;lt;- create_sna_data %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  transmute(name, 
            value = row_number())

create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  activate(edges) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  gather(key, value) %&amp;gt;% 
  left_join(name_id_df) %&amp;gt;% 
  split(.$key) %&amp;gt;% 
  bind_cols() %&amp;gt;% 
  select(resp_name = name, 
         recieve_info = name1) %&amp;gt;% 
  bind_cols(create_sna_data %&amp;gt;% 
              as_tibble() %&amp;gt;% 
              select(-name))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All right, that’s it! We can look at our data below; hopefully, it looks like something we might collect in the future for SNA research.&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;caption&gt;
&lt;span id=&#34;tab:unnamed-chunk-13&#34;&gt;Table 1: &lt;/span&gt;Our mock dataset for SNA
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
resp_name
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
recieve_info
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
income_pre_tax
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
buy_farm_mark
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
cows_on_farm
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
trust_score
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Roberts, Nicole
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
el-Younis, Tayyiba
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£6,389.69
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Hardly any meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Dixon, Lanasia
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Stirewalt, Sutter
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£23,319.29
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Every meal
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Warat, Calvin
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Richardson, Chelsea
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£27,098.81
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Most meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Chroneos, Samuel
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Ocampo, Ruth
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£26,924.22
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Hardly any meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
4
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Lamichhane, Wesley
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
al-Shaheen, Husaam
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£36,799.65
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Hardly any meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Loehr, Jamie
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Schmalz, Keiley
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£73,347.91
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Most meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
3
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Apples for apples I</title>
      <link>/post/apples-for-apples/quick-start-network-analysis/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/apples-for-apples/quick-start-network-analysis/</guid>
      <description>
&lt;link href=&#34;/rmarkdown-libs/tabwid/tabwid.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/tabwid/tabwid.js&#34;&gt;&lt;/script&gt;


&lt;h2&gt;
Introduction
&lt;/h2&gt;
&lt;p&gt;This is the initial Deltanomics blog post. So, in this post, I’ll cover a few different approaches to analysis and data visualisation rather quickly that provides a good overview of the types of things covered in this blog.&lt;/p&gt;
&lt;p&gt;Let’s start with loading the packages we’ll use. Also, let’s create a &lt;code&gt;ggplot&lt;/code&gt; theme that allows us to easily make changes when we want.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Libraries used in analysis
library(tidyverse)
library(magrittr)
library(scales)
library(RColorBrewer)
library(janitor)
library(ggraph)
library(tidygraph)
library(graphlayouts)
library(flextable)

## a congruent theme throughout for plots
post_theme &amp;lt;- function(...){
  theme(text = element_text(color = &amp;#39;black&amp;#39;, 
                            family = &amp;#39;serif&amp;#39;), 
        axis.text = element_text(color = &amp;#39;black&amp;#39;),
        panel.background = element_blank(), 
        axis.line.x = element_line(color = &amp;#39;black&amp;#39;), 
        axis.ticks = element_blank(), 
        plot.margin = margin(.5, .5, .5, .5, &amp;#39;cm&amp;#39;),
        plot.caption = element_text(hjust = 0, 
                                    face= &amp;quot;italic&amp;quot;), 
        plot.title = element_text(face = &amp;#39;bold&amp;#39;),
        plot.subtitle = element_text(face = &amp;#39;bold&amp;#39;),
        plot.title.position = &amp;quot;plot&amp;quot;, 
        plot.caption.position =  &amp;quot;plot&amp;quot;) +
          theme(...) # this bit allows us to make changes using this same function instead of calling two theme functions. 
        }&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
Data source
&lt;/h2&gt;
&lt;p&gt;We’re going to look at some FAO data on apples. It comes from the FAO’s online data portal, which can be accessed &lt;a href=&#34;http://www.fao.org/faostat/en/?#data/TM&#34;&gt;here&lt;/a&gt;. The website allows users to specify the varibles they want to analysis and download them into a .csv file. This makes working with the data a breeze using the &lt;code&gt;tidyverse&lt;/code&gt;. Let’s first take a quick look at the data.&lt;/p&gt;
&lt;p&gt;We use &lt;code&gt;read_csv&lt;/code&gt; from the &lt;code&gt;readr&lt;/code&gt; package (included in the &lt;code&gt;tidyverse&lt;/code&gt; library) and the function &lt;code&gt;clean_names&lt;/code&gt; from the &lt;code&gt;janitor&lt;/code&gt; package. &lt;code&gt;clean_names&lt;/code&gt; does exactly what it says it does – cleans up a &lt;code&gt;dataframe&lt;/code&gt;/&lt;code&gt;tibbles&lt;/code&gt;’s variable names so that they are easy to use in analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apples &amp;lt;- read_csv(&amp;#39;/Users/emeador/Downloads/FAOSTAT_data_1-1-2020.csv&amp;#39;) %&amp;gt;% clean_names()&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h2&gt;
Data Analysis
&lt;/h2&gt;
&lt;h3&gt;
General analysis
&lt;/h3&gt;
&lt;p&gt;Let’s do some really quick data analysis to get a feel of what the data works with. From there we’ll move on towards looking at apple supply chain.
A quick bar plot shows the top 20 exporting countries.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apple_export_total &amp;lt;- apples %&amp;gt;%
  filter(element == &amp;#39;Export Quantity&amp;#39;, 
         flag_description == &amp;#39;Official data&amp;#39;)%&amp;gt;%
  group_by(reporter_countries) %&amp;gt;% 
  summarise(total = sum(value, na.rm = T)) %&amp;gt;% 
  mutate(reporter_countries=fct_reorder(reporter_countries,total))

apple_export_total %&amp;gt;% 
  top_n(20) %&amp;gt;% 
  ggplot(aes(reporter_countries, total))+
  geom_col(fill = &amp;#39;#ff0800&amp;#39;)+
  scale_y_continuous(expand = c(0,0), labels = comma)+
  coord_flip()+
  post_theme()+
  labs(title = &amp;#39;Top 20 countries that export apples in 2017&amp;#39;, subtitle = &amp;#39; SOURCE: FAO Detailed trade matrix&amp;#39;, x = NULL, y = &amp;#39;Tonnes&amp;#39;, caption = &amp;#39;NOTE: Only official data shown&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/Export-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;China, mainland is the highest exporter of tonnes of apples in 2017 according to the data with 1,328,374 tonnes of apples exported.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the top importers of apples to the UK. We can adapt the code above to create a bar plot that filters by the variable &lt;code&gt;parter_countries&lt;/code&gt;, which we’ll set to filter for &lt;em&gt;United Kingdom&lt;/em&gt; using the &lt;code&gt;==&lt;/code&gt; operator.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UK_import &amp;lt;- apples %&amp;gt;%
  filter(element == &amp;#39;Export Quantity&amp;#39;, 
         partner_countries == &amp;#39;United Kingdom&amp;#39;, 
         flag_description == &amp;#39;Official data&amp;#39;) %&amp;gt;% 
  group_by(reporter_countries) %&amp;gt;% 
  summarise(total = sum(value, na.rm = T)) %&amp;gt;% 
  mutate(reporter_countries = fct_reorder(reporter_countries, total)) %&amp;gt;% 
  top_n(20)

UK_import %&amp;gt;% 
  ggplot(aes(reporter_countries, total))+
  geom_col(fill = &amp;#39;#ff0800&amp;#39;)+
  scale_y_log10(expand = c(0,0), labels = comma)+
  coord_flip()+
  post_theme()+
  labs(title = &amp;#39;Where does the UK get its apples from?&amp;#39;, subtitle = &amp;#39; SOURCE: FAO Detailed trade matrix&amp;#39;, x = NULL, y = &amp;#39;log10(Tonnes)&amp;#39;, caption = &amp;#39;NOTE: Only official data shown&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/UK-imports-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The UK imported 444,906 tonnes of apples in 2017. Over a quarter of all apples imported to the UK came from France and other European countries. So they didn’t have to travel too far. However, the largest and third largest imports came from South Africa and New Zealand, i.e. they traveled halfway across the world!&lt;/p&gt;
&lt;p&gt;Of course, it’s common for goods to travel great distances in today’s global economy. This of course impacts sustainability as traveling across the world increases the carbon output. And while a total carbon assessment is out of the scope of this post, we can use &lt;code&gt;network analysis&lt;/code&gt; to help better our understanding of how the global apple supply chain operates and where the UK sits in it all.&lt;/p&gt;
&lt;h3&gt;
Network analysis
&lt;/h3&gt;
&lt;p&gt;We need to create an &lt;code&gt;igraph&lt;/code&gt; object in &lt;code&gt;R&lt;/code&gt; from our &lt;code&gt;apples&lt;/code&gt; tibble to work with. The easiest way to do this is to create an edgelist from our data. An edgelist is a two-column list of nodes where adjacent nodes form an edge. &lt;code&gt;igraph&lt;/code&gt; and by extension &lt;code&gt;tidygraph&lt;/code&gt; will create graphs with dataframes that an edgelist in their first two columns. The remaining columns will be used as edge attributes.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;tabwid&#34;&gt;&lt;table style=&#39;border-collapse:collapse;width:288px;&#39;&gt;&lt;caption&gt;Table 1: Edgelist example&lt;/caption&gt;&lt;thead&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;reporter_countries&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;partner_countries&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Greece&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Bahrain&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Germany&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Cyprus&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Ireland&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Australia&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Poland&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Armenia&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Brunei Darussalam&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Japan&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Egypt&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Turkey&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Austria&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Malta&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Poland&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Republic of Moldova&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Lebanon&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;New Zealand&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Denmark&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Ireland&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
An example of the edgelist format is shown above in Table 1. In this example Greece is adjacent to Bahrain, so an edge will be drawn between the two.&lt;/p&gt;
&lt;p&gt;The code below creates a graph and plots it using &lt;code&gt;ggraph&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;aph &amp;lt;- apples %&amp;gt;%
  filter(element == &amp;#39;Export Quantity&amp;#39;, 
         flag_description == &amp;#39;Official data&amp;#39;) %&amp;gt;% 
  select(reporter_countries, partner_countries, value) %&amp;gt;% 
  as_tbl_graph()



aph %&amp;gt;% 
  mutate(degree = centrality_degree()) %&amp;gt;% 
  ggraph(&amp;#39;stress&amp;#39;)+ # specify the DH layout 
  geom_edge_fan(aes(alpha = ..index..), 
                color = &amp;#39;#654321&amp;#39;,
                show.legend = F)+
  geom_node_point(aes(size = degree), 
                  color = &amp;#39;#00c400&amp;#39;)+
  scale_size(range = c(1, 2.5), 
      name = &amp;#39;# different countries\n that exporting apples&amp;#39;)+
  coord_equal()+
  theme_graph(foreground = T)+
  labs(title = &amp;#39;The apple supply chain ... hairball&amp;#39;, 
       caption = &amp;#39;Without much formatting, the network is complicated and unreadable.\nThe look is characteristic of the hairball that sometimes occurs in network visualisations.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/Apple-network-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
The graph above is utterly unintelligable, and shoudn’t really appear in something you plan to publish. There are few things we can do to make the graph easier to understand when visualised. They are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove unnessary edges&lt;/strong&gt; – this serves a few purposes: it frees up some of the clutter that comes from having too many lines on the plot; but, another lesser known thing is that it actually affects the underlying &lt;code&gt;layout&lt;/code&gt; algorythim We’ll get into this in another post, but, in short, layout algorythims (usually) attempt to group nodes together in a way that reduces overlapping edges. Fewer edges can mean the nodes are spaced in a way so that naturally occuring patterns in connectivity are more easily seen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identify and showcase interesting patterns&lt;/strong&gt; – network graphs are often made better when they illustrate specific patterns that a researcher has previously identified through visualising the data or running statistical analysis. This is similar to plotting percents or sums using bars graphs – you choose the plot style (think geom_*’s in &lt;code&gt;ggplot2&lt;/code&gt;) that corresponds to what you want to showcase!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following code creates an edgelist in the form of a &lt;code&gt;tibble&lt;/code&gt; that has each county&#39;s top 2 exporting countries (the two countries where it send the most apples). This greatly reduces the number of edges and allows more nuanced findings in terms of apple trading patterns to emerge.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UK_neighborhood_1 &amp;lt;- 
  aph %&amp;gt;% 
  to_local_neighborhood(node = 85, order = 1, mode = &amp;#39;in&amp;#39;)%&amp;gt;% 
  .[[1]] %&amp;gt;% 
  activate(edges) %&amp;gt;% 
  group_by(from) %&amp;gt;% 
  top_n(2, value) %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
  mutate(degree = centrality_degree()) 

 UK_neighborhood_1 %&amp;gt;% 
  ggraph()+
  geom_edge_fan(aes(alpha = value), 
                color = &amp;#39;#654321&amp;#39;,
                width = 1.25, 
                arrow = arrow(length = unit(2.5, &amp;#39;mm&amp;#39;), 
                              type = &amp;#39;closed&amp;#39;),
                end_cap = circle(5, &amp;#39;mm&amp;#39;))+
  geom_node_label(aes(size = degree, 
                      label = str_wrap(name, 10)),
                  color = &amp;#39;#ff0800&amp;#39;,
                  show.legend = F)+
  scale_size(range = c(2, 3))+
   scale_edge_alpha(range = c(.5, 1), 
                    labels = comma)+
   scale_edge_width_continuous(range = c(.5, 1.5))+
  coord_equal()+
  theme_graph(foreground = T)+
  labs(title = &amp;#39;The UK\&amp;#39;s 1-degree apple supply neighborhood&amp;#39;, 
       caption = &amp;#39;Only the top-two export destinations are shown per country. All nodes have exactly two out-degrees.\nSome nodes have in-degrees because they happen to be another country\&amp;#39;s top-two imports.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/UK-network-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;h3&gt;
Visualising travel distance
&lt;/h3&gt;
&lt;h4&gt;
A quick base-map of the world
&lt;/h4&gt;
&lt;p&gt;We can draw on existing online resources to help us prepare a base map of the world using &lt;code&gt;ggplot&lt;/code&gt; and a (newish) file type called simple features &lt;code&gt;sf&lt;/code&gt;. &lt;a href=&#34;https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html&#34;&gt;Here&lt;/a&gt; is a great resource on mapping and spatial analysis in R using &lt;code&gt;ggplot2&lt;/code&gt; by Mel Moreno and Mathieu Basille. I highly recommend checking it out. &lt;code&gt;sf&lt;/code&gt; are my prefered object types to work with in R when doing any type of mapping or spatial analysis. The map is projected using the &lt;em&gt;Equal Earth&lt;/em&gt; projection to help readers more easily see the network edges (when they are plotted).&lt;/p&gt;
&lt;p&gt;Let’s take a look at a world map that we can use as a base for the network plot. We’ll use the &lt;code&gt;rnaturalearth&lt;/code&gt; and &lt;code&gt;rnaturalearthdata&lt;/code&gt; packages to provde parameters and data as &lt;code&gt;sf&lt;/code&gt; objects, and we’ll plot the map in &lt;code&gt;ggplot2&lt;/code&gt;. &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;ggraph&lt;/code&gt; can objects can be stacked on top of one another to create a flowing network map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rnaturalearth)
library(rnaturalearthdata)

countries &amp;lt;- ne_countries(returnclass = &amp;quot;sf&amp;quot;)


graticules &amp;lt;- ne_download(type = &amp;quot;graticules_15&amp;quot;, 
                          category = &amp;quot;physical&amp;quot;,
                          returnclass = &amp;quot;sf&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;/private/var/folders/ck/v11m55r567d9z7ql_1vvdy600000gn/T/Rtmpb9TTSG&amp;quot;, layer: &amp;quot;ne_110m_graticules_15&amp;quot;
## with 35 features
## It has 5 fields
## Integer64 fields read as strings:  degrees scalerank&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bound_box &amp;lt;- ne_download(type = &amp;quot;wgs84_bounding_box&amp;quot;, 
                  category = &amp;quot;physical&amp;quot;,
                  returnclass = &amp;quot;sf&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;/private/var/folders/ck/v11m55r567d9z7ql_1vvdy600000gn/T/Rtmpb9TTSG&amp;quot;, layer: &amp;quot;ne_110m_wgs84_bounding_box&amp;quot;
## with 1 features
## It has 2 fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_world &amp;lt;- ggplot() +
  geom_sf(data = bound_box, 
          col = &amp;quot;grey20&amp;quot;, 
          fill = &amp;quot;transparent&amp;quot;) +
  geom_sf(data = countries, 
          aes(fill = sovereignt),
          color = &amp;#39;grey&amp;#39;,
          lwd = 0.3,
          show.legend = F) +
  scale_fill_viridis_d(direction = -1)+
  post_theme(legend.position = &amp;#39;bottom&amp;#39;, 
             legend.background = 
               element_rect(fill = &amp;#39;grey95&amp;#39;, 
                            color = &amp;#39;black&amp;#39;))+
  theme(plot.title = element_text(size = 24,
                                  face = &amp;#39;bold&amp;#39;), 
        axis.text = element_blank())+
  labs(title = &amp;#39;World Map&amp;#39;, 
       caption = &amp;#39;Projected with the Equal Earth map projection &amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/travel-map-1.png&#34; width=&#34;1152&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;h4&gt;
Combining the basemap and network graph
&lt;/h4&gt;
&lt;p&gt;In preparation for our supply chain we need to calculate the node positions for each country. A good starting point is to use a polygon’s centroid points. A polygon centroid is the mathmatical centre of mass. Which means that it’s slightly different that the mean of longitude and latitude. The unique and non-uniform shapes of most policital boundaries mean that centre-mass locations are usually preferred. We can use the ‘st_centroid’ function from the ‘sf’ package to calculate the centroids for every country in the world. We’ll save this as ‘country_centroids’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get centroids
country_centroids &amp;lt;- countries %&amp;gt;% 
  sf::st_centroid() %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  select(name, geometry) %&amp;gt;% 
  mutate(geometry  = as.character(geometry)) %&amp;gt;% 
  separate(geometry, c(&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;), sep = &amp;#39;,&amp;#39;) %&amp;gt;% 
  mutate_at(vars(x, y), list(~parse_number(.)))


# a little cleaning of a few countries to 
# ensure that they merge properly. 
node_centroids &amp;lt;- UK_neighborhood_1 %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  select(name) %&amp;gt;% 
  mutate(name = case_when(
    str_detect(name, &amp;#39;China&amp;#39;) ~ &amp;#39;China&amp;#39;, 
    str_detect(name, &amp;#39;Iran&amp;#39;) ~ &amp;#39;Iran&amp;#39;, 
    str_detect(name, &amp;#39;Czechia&amp;#39;) ~ &amp;#39;Czech Rep.&amp;#39;, 
    str_detect(name, &amp;#39;United States of America&amp;#39;) ~ 
      &amp;#39;United States&amp;#39;, 
    T~name
  )) %&amp;gt;% 
  left_join(country_centroids) 

layout_centroid &amp;lt;- node_centroids %&amp;gt;% 
  select(-name)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we’ll use &lt;code&gt;ggraph&lt;/code&gt; to make the final plot. We use a layered approach and add some &lt;code&gt;geom_sf&lt;/code&gt;’s to input the background world map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# start with a ggraph
ggraph(UK_neighborhood_1, 
         layout = layout_centroid)+
    geom_sf(data = bound_box, 
          col = &amp;quot;grey20&amp;quot;, 
          fill = &amp;quot;transparent&amp;quot;) +
  geom_sf(data = countries, ## add the geom_sf to map
          aes(fill = sovereignt), 
          color = &amp;#39;grey&amp;#39;, 
          lwd = 0.3,
          show.legend = F)+
  geom_edge_arc(arrow = arrow(type = &amp;#39;closed&amp;#39;, # add geom_edge for edges
                              length = unit(1, &amp;#39;mm&amp;#39;)),
                width = .75, 
                color = &amp;#39;black&amp;#39;,
                end_cap = circle(1.25, &amp;#39;mm&amp;#39;), 
                alpha = .75, 
                strength = .15)+
  post_theme(legend.position = &amp;#39;bottom&amp;#39;, 
             legend.background = 
               element_rect(fill = &amp;#39;grey95&amp;#39;, 
                            color = &amp;#39;black&amp;#39;))+
  scale_fill_viridis_d(direction = -1)+
  theme(plot.title = element_text(size = 24,
                                  face = &amp;#39;bold&amp;#39;), 
        axis.text = element_blank())+
  labs(title = &amp;#39;Apples for apples&amp;#39;, 
       subtitle = &amp;#39;UK first degree network&amp;#39;,
       caption = &amp;#39;Projected with the Equal Earth map projection &amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/final-supply-map-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
