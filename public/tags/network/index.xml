<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network | Deltanomics</title>
    <link>/tags/network/</link>
      <atom:link href="/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <description>network</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020</copyright><lastBuildDate>Sun, 31 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu92a9dc9639b79cadf266306904fb01f6_516996_512x512_fill_lanczos_center_2.png</url>
      <title>network</title>
      <link>/tags/network/</link>
    </image>
    
    <item>
      <title>Be like me - looping through shortest distance analysis</title>
      <link>/post/sna/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/sna/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I’ve been doing some work lately on social networks that exist between organisations or institutions.
This is nice as it builds on some of my dissertation work, and I generally find it quite interesting.
Networks that form between organisations are often quite powerful, in that they can illustrate where strong areas of like-minded work exist or where new connections might be useful in strengthing one organisation’s influence.&lt;/p&gt;
&lt;div id=&#34;why-like-me&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why like me?&lt;/h2&gt;
&lt;p&gt;Organisational ties – like personal relationships in business – can be extremely valuable to a firm’s bottom line.
These ties are often leveraged and manoeuvred to produce some sought-after result.
A few examples might be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do I know anyone at Organisation X who might have more information about some big grant schemed about to be launched?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Who in my inner circle has ties to a business who might provide some venture capital for an idea I have?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The notion of leverage’s one’s networks is nothing new. It’s known as &lt;strong&gt;&lt;em&gt;social capital&lt;/em&gt;&lt;/strong&gt; theory in sociology and is a well-known tactic taught in business schools.
Its applications are too big to get into in this blog post.
I’d suggest taking a look at this &lt;a href=&#34;https://www.forbes.com/sites/forbescoachescouncil/2018/11/27/two-ways-to-leverage-relationships-for-your-business-goals/#672d29eaa0cc&#34;&gt;Forbes&lt;/a&gt; article for a bit more information on why this might benefit you.
If you’re interested in leveraging one’s ties for their benefit from an academic perspective you can read some of my published articles or read works by James Coleman, Pierre Bourdeau or Robert Putnam from the 1980s and 1990s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-nitty-gritty&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The nitty-gritty&lt;/h1&gt;
&lt;div id=&#34;some-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Some data&lt;/h2&gt;
&lt;p&gt;Now that we know it’s a worthwhile venture to leverage one’ network ties, let’s take a closer look at how we might approach this from a data perspective.
We’ll use a portion of the mock data we created in an earlier blog found &lt;a href=&#34;https://www.thedeltanomics.com/post/networks-from-survey-data-creating-mock-data/&#34;&gt;here&lt;/a&gt;.
The database created from the code in that blog post is called &lt;code&gt;create_sna_data&lt;/code&gt;, and we’ll be using it for the rest of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-what-were-looking-for&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Finding what we’re looking for&lt;/h2&gt;
&lt;p&gt;We’re going to be preforming shortest-distance analysis.
Shortest distance analysis, also known as shortest paths, is a common algorithm used anytime objects are found within a network.
It’s common in logistics work, especially regarding travel along a road or rail network.
GIS analysis uses this approach as well.
A great example is the Scottish Index of Multiple Deprivation’s use of shortest-distance analysis in looking at access as a form of deprivation in Scotland.
Take a look at the SIMD documentation &lt;a href=&#34;https://statistics.gov.scot/data/scottish-index-of-multiple-deprivation---geographic-access-to-services-indicators&#34;&gt;here&lt;/a&gt; for an overview.&lt;/p&gt;
&lt;p&gt;According to igraph’s documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… [shortest distance] calculates the length of all the shortest paths from or to the vertices in the network. [It] calculates one shortest path (the path itself, and not just its length) from or to the given vertex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s use the shortest distance function from tidygraph (which implements igraph’s &lt;code&gt;shortest.paths&lt;/code&gt; functionality) using a straight forward approach.&lt;/p&gt;
&lt;p&gt;Below let’s look at the shortest distance between two nodes.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;First, we’ll create a base layout from which to filter for sub-graphs when we want to show a path between two nodes.&lt;/li&gt;
&lt;li&gt;Then, we’ll plot the graph using &lt;code&gt;ggraph&lt;/code&gt;. &lt;code&gt;ggraph&lt;/code&gt; likes the layout matrices to be in &lt;code&gt;tibble&lt;/code&gt; form with the column names &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a filtering column called id.
create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  mutate(id. = row_number())

# use the layout with stress algorythm to create a layout
layout_df &amp;lt;- create_sna_data %&amp;gt;% 
  layout_with_stress() %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  set_names(c(&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;) )


## And now the plot
create_sna_data %&amp;gt;% 
  ggraph(layout = layout_df)+ # our layout algorythm from above
  geom_edge_fan(start_cap = circle(2, &amp;#39;mm&amp;#39;), 
                end_cap = circle(2, &amp;#39;mm&amp;#39;))+
  geom_node_point(size = 4)+
  geom_node_text(aes(label = id.), 
                 size = 2.25, 
                 color = &amp;#39;white&amp;#39;)+
  labs(title = &amp;#39;Full network&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we’ll find the shortest path between two nodes: 75 and 4.
We’ll plot the shortest path as a network and lay it on top of the network above so we can visualise the path within the network.
To do this, we’ll calculate the layout tibble first and filter it for the shortest paths network using the &lt;code&gt;layout_with_stress&lt;/code&gt;function from the &lt;code&gt;graphlayouts&lt;/code&gt; package.
Note that we’ll need to pull our nodes that sit along the shortest path from our layout data frame.
We’ll use the &lt;code&gt;slice&lt;/code&gt; function in &lt;code&gt;dplyr&lt;/code&gt; for this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_sna_data_4_75 &amp;lt;- 
  create_sna_data %&amp;gt;%
  morph(to_shortest_path, 75, 4) %&amp;gt;% 
  mutate(selected_node = T) %&amp;gt;% 
    activate(edges) %&amp;gt;% 
    mutate(selected_edge = T) %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
    unmorph()

colors_v &amp;lt;- c(&amp;#39;tomato&amp;#39;, 
  &amp;#39;skyblue&amp;#39;)

names(colors_v) &amp;lt;- 
  c(&amp;#39;TRUE&amp;#39;, &amp;#39;Other&amp;#39;)


create_sna_data_4_75 %&amp;gt;% 
  mutate(selected_node = ifelse(
    is.na(selected_node), &amp;#39;Other&amp;#39;, selected_node
  )) %&amp;gt;% 
  activate(edges) %&amp;gt;% 
  mutate(selected_edge = ifelse(
    is.na(selected_edge), &amp;#39;Other&amp;#39;, selected_edge
  )) %&amp;gt;% 
  ggraph(layout = layout_df)+
  geom_edge_fan(aes(color = selected_edge),
                start_cap = circle(2, &amp;#39;mm&amp;#39;), 
                end_cap = circle(2, &amp;#39;mm&amp;#39;))+
  geom_node_point(aes(color = selected_node),
                  size = 4)+
  geom_node_text(aes(label = id.), 
                 size = 2.5, 
                 color = &amp;#39;white&amp;#39;)+
  scale_color_manual(values = colors_v, 
                     name = &amp;#39;Nodes&amp;#39;, 
                     label = c(&amp;#39;Other&amp;#39;, 
                               &amp;#39;Shortest path&amp;#39;))+
  scale_edge_color_manual(values = colors_v, 
                     name = &amp;#39;Edges&amp;#39;, 
                     label = c(&amp;#39;Other&amp;#39;, 
                               &amp;#39;Shortest path&amp;#39;))+
  labs(title = &amp;#39;Shortest path between nodes 75 and 4&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;leveraging-networks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Leveraging networks&lt;/h2&gt;
&lt;p&gt;The notion of leveraging networks comes from the reality that not every node in a network is available to us to draw resources from.
For the most part, a node has a useable relationship with only those nodes in its inner circle – or its one-degree neighbourhood.
Now, this isn’t always the case, but as a very general rule with SNA, the further one node is from another, the less influence they have on one another. SNA can help identify which people could put you in touch with some other person based on a set of pre-defined criteria.
SNA helps answer the question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do I know a dude who knows a dude?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;the-goal&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The goal&lt;/h3&gt;
&lt;p&gt;So let’s suppose our goal is to utilise our social network to find a potential partner to work on a grant with us.
The funder of our grant scheme has a real soft spot for loners – i.e. one-degree nodes; maybe because before our funder made it big they used to be a one-degree node themselves.
&lt;strong&gt;&lt;em&gt;Who knows!&lt;/em&gt;&lt;/strong&gt;
Below we see our same network with the one-degree nodes highlighted.
&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We’ll pretend that we are &lt;strong&gt;&lt;em&gt;Le, Brianna&lt;/em&gt;&lt;/strong&gt; (# 87), one of the most well-connected persons in the network (with a betweenness score of 3,088).&lt;/p&gt;
&lt;p&gt;We know that we want to partner with a node that has only-degree.
We will want to approach as many one-degree nodes as possible, as some will turn us down or might not be available to partner on the grant application.&lt;/p&gt;
&lt;p&gt;We also know that we get along with some people better than others and that we’ll have to depend on our relationships to help leverage them.
It may sound crazy, but &lt;strong&gt;&lt;em&gt;Le, Brianna&lt;/em&gt;&lt;/strong&gt; (ourself) gets along really well with &lt;em&gt;people who buy all their food from farmers markets&lt;/em&gt;.
So, we’ll use this to our advantage by trying to find as many shortest paths to single-degree nodes that are filled with nodes that buy all their meals at farmers markets.
We’ll do this with iterative programming otherwise known as &lt;strong&gt;&lt;em&gt;looping&lt;/em&gt;&lt;/strong&gt;.
Therefore, our approach is:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Assign a numeric scoring value for the column &lt;code&gt;buy_farm_mark&lt;/code&gt;, with more meals receiving a higher score; geodesic distance will also be factored into the score, with nodes further away receiving a higher score.&lt;/li&gt;
&lt;li&gt;Identify all shortest paths between Le, Brianna and all one-degree nodes in the network.&lt;/li&gt;
&lt;li&gt;Create a scaled score for each path that we can use to decide on who to contact first for partnering on the grant application.&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;step-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Step 1&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Those who buy every meal from the farmers 
# market get a score of 5, 3 for most meals
# and 0 for hardly any meals.  We&amp;#39;ll create 
# a tibble and merge it with data frame. 
farm_buy_n &amp;lt;- 
  tibble(buy_farm_mark = c(&amp;#39;Every meal&amp;#39;, 
                           &amp;#39;Most meals&amp;#39;, 
                           &amp;#39;Hardly any meals&amp;#39;), 
        farm_mark_score = c(5, 3, 0))


create_sna_data_updated &amp;lt;- 
  create_sna_data_updated %&amp;gt;% 
  left_join(farm_buy_n, 
            by = &amp;quot;buy_farm_mark&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Step 2&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get all one-degree node 
one_degree_names &amp;lt;- names(
  which(
    degree(
      create_sna_data_updated) == 1))

# and pull out their names.
one_degree_ids &amp;lt;- 
  which(
    V(create_sna_data_updated)$name %in% 
      one_degree_names)

# Find the max betweeness for the starting node.
max_degree &amp;lt;- which(
  betweenness(
    create_sna_data_updated) == max(
      betweenness(
        create_sna_data_updated)))[1]

## The loop!!
## 
all_shortest_one_degre_paths_ls &amp;lt;- 
  map(one_degree_ids, # our one-degree nodes are here
      function(x){
        
create_sna_data_updated %&amp;gt;% 
          
  morph(to_shortest_path, max_degree, x) %&amp;gt;% 
          mutate(selected_node = TRUE) %&amp;gt;% 
          activate(edges) %&amp;gt;% 
          mutate(selected_edge = TRUE) %&amp;gt;% 
          activate(nodes) %&amp;gt;% 
  unmorph()
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Step 3&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create the scores and flatten the list
# into a numeric vector that we can use to 
# subset by.

all_scores &amp;lt;- 
  all_shortest_one_degre_paths_ls %&amp;gt;%
  map(function(x){
    x %&amp;gt;% 
  filter(selected_node) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  summarise(total_farm = sum(farm_mark_score), 
            n = n(), 
            total_score = total_farm / n) %&amp;gt;% 
  pull(total_score)
  }) %&amp;gt;% 
  flatten_dbl()
  
highest_score &amp;lt;- 
  which(all_scores == max(all_scores))[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now let’s take a look at the final results.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;Let’s plot our final results using the code below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;color_v_iii &amp;lt;- c(&amp;#39;#084081&amp;#39;, 
                 &amp;#39;#A8DDB5&amp;#39;)
names(color_v_iii) &amp;lt;- c(T, &amp;#39;Other&amp;#39;)

highest_score_g &amp;lt;- all_shortest_one_degre_paths_ls[[
  highest_score]] %&amp;gt;% 
  mutate(selected_node = ifelse(is.na(selected_node), &amp;#39;Other&amp;#39;, selected_node)) %&amp;gt;% 
  activate(edges) %&amp;gt;% 
  mutate(selected_edge = ifelse(is.na(selected_edge), &amp;#39;Other&amp;#39;, selected_edge)) 

highest_score_g %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
    mutate(buy_farm_mark = factor(buy_farm_mark, levels = c(&amp;#39;Every meal&amp;#39;, 
           &amp;#39;Most meals&amp;#39;, 
           &amp;#39;Hardly any meals&amp;#39;))) %&amp;gt;% 
    ggraph(layout = layout_df)+
    geom_edge_fan(aes(color = selected_edge))+
    geom_node_point(aes(color = selected_node, 
                        shape = buy_farm_mark), 
                    size = 3)+
  scale_color_manual(values = color_v_iii, 
                     &amp;#39;Node path&amp;#39;, 
                     labels = c(&amp;#39;Other&amp;#39;, 
                                &amp;#39;Highest score&amp;#39;
                                ))+
  scale_edge_color_manual(values = color_v_iii, 
                          &amp;#39;Edge path&amp;#39;, 
                     labels = c(&amp;#39;Other&amp;#39;, 
                                &amp;#39;Highest score&amp;#39;
                                ))+
  scale_shape(&amp;#39;Meals bought from\nfarmers market&amp;#39;)+
  labs(title = &amp;#39;Highest scoring-paths graph&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;
We can see that our approach to identifying the most appropriate project partner favours those nodes that eat every meal with food bought from the farmers market.
Of course, this is just a demonstration of how looping can be used with network analysis to find optimum routes within a network.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Networks from survey data: Creating mock data</title>
      <link>/post/networks-from-survey-data-creating-mock-data/</link>
      <pubDate>Fri, 27 Mar 2020 16:25:07 +0000</pubDate>
      <guid>/post/networks-from-survey-data-creating-mock-data/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;why-create-a-new-dataset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Why create a new dataset?&lt;/h1&gt;
&lt;p&gt;I’d like to do a series of posts looking at social network analysis using primary data (i.e. data collected by yourself.).
There are a lot of different examples of when you might want to use a survey to collect data for use in analysing social networks.
But that’s for another time.&lt;/p&gt;
&lt;p&gt;The purpose of this post is to create a new dataset that can be used in practising social network analysis in future posts.
Creating a new dataset in R has a lot of useful advantages.
The biggest advantage is that we will have a single dataset that can be used in all future examples when learning SNA with surveys.&lt;/p&gt;
&lt;p&gt;Creating a new dataset is also a great learning opportunity because we will &lt;em&gt;reverse engineer&lt;/em&gt; a dataset around specific modelling, correlations and otherwise interesting easter-eggs that we can use as learning opportunities in future posts.
We will rely on the power of probability statistics to help us get there.
And as we make decisions about how to structure our dataset, we’ll learn some important aspects of social network analysis and general data science.
We’ll save this for the end though.
So, let’s get started!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;building-a-new-dataset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Building a new dataset&lt;/h1&gt;
&lt;p&gt;As with most posts on Deltanomics, we’ll use a tidy framework. So, that means loading &lt;code&gt;tidyverse&lt;/code&gt;, and we’ll go ahead and load our other SNA workhorse packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# For a tidy framework
library(tidyverse)
library(glue)
library(scales)

# Our graphing libraries
library(igraph)
library(tidygraph)
library(ggraph)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;an-edgelist&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An edgelist&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is create an &lt;a href=&#34;https://en.wikipedia.org/wiki/Edge_list&#34;&gt;edgelist&lt;/a&gt; structure in our data.
Really anything can be used as an edgelist as it’s just two columns that represent an edge is meant to be drawn between adjacent cells.
A typical use of surveys in SNA is to look at how information flows between two people and the influence that the information has on sustainable behaviours.
So let’s create two columns that would reasonably collect that type of information.&lt;/p&gt;
&lt;div id=&#34;respondent-name&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Respondent name&lt;/h3&gt;
&lt;p&gt;First, we need a column for the respondent’s name or identification.
This column length will be the first and primary argument in our function to allow us to create datasets of any size we choose.&lt;/p&gt;
&lt;p&gt;For this, let’s use one of my favourite packages &lt;code&gt;randomNames&lt;/code&gt; to generate some realistic names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(randomNames)

create_sna_data &amp;lt;- 
tibble( # let&amp;#39;s pull 100 random names to start
    resp_name = randomNames(100,
                  which.names = &amp;#39;both&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;information-holder&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Information holder&lt;/h3&gt;
&lt;p&gt;Next, we’ll create a column that holds the name of whom the respondent goes to for information.
We want our social network to be &lt;em&gt;complete&lt;/em&gt;; meaning that every node in the graph will attribute data.
To ensure this happens, we need to take special care that all of the possible nodes are also respondents.
In short, the second column of the edgelist needs to be completely contained within the first.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 1. Make a disconnect graph
g &amp;lt;- make_empty_graph() %&amp;gt;% 
  add_vertices(2)

# 2. Run a while loop to ensure that a connected
# graph is created -- this will help smooth over some of the graphing functions for later. 
# 
while (is.connected(g)== FALSE) {

  g &amp;lt;- create_sna_data %&amp;gt;% 
    mutate(info_one = sample(
      sample(resp_name, 80), # create 2nd column
      nrow(.), T)) %&amp;gt;%       # as subset of the
    as_tbl_graph()           # first.
}

# send it back to the original name
create_sna_data &amp;lt;-  g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s take a look at how the social network contained within the data looks like.
&lt;img src=&#34;/post/2020-03-27-networks-from-survey-data-creating-mock-data_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;960&#34; /&gt;
The network should loosely resemble a sparsely connected sociogram, and it should serve our purposes well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;node-edge-attributes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Node &amp;amp; edge attributes&lt;/h2&gt;
&lt;p&gt;Now that we have our edge list as the first two columns of the data set, we can start to add some node and edge attributes. However, we can’t just randomly create new variables and values because we want a dataset that resembles what we might find in the real world. This means certain variables should be related or correlated with one another. And, because we’re interested in network analysis, a node’s position in the network should also influence their values in key columns. To achieve this, we’ll need to &lt;em&gt;reverse&lt;/em&gt; engineer the values based on some graph analysis.&lt;/p&gt;
&lt;div id=&#34;node-attributes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Node attributes&lt;/h3&gt;
&lt;p&gt;We’ll do some rapid-fire node correlations with some key socio-economic variables.&lt;/p&gt;
&lt;div id=&#34;income-category&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Income category&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  mutate(income_pre_tax = map_chr(degree(create_sna_data), function(x){
  
    # random normal using degree as the mean
    # and a standard deviation of 2.5
    random_norm &amp;lt;- rnorm(n = 1, 
        mean = x, 
        sd = sample(2.5, 1, F))
  
  dollar(abs(random_norm)*15000, 
         prefix = &amp;#39;£&amp;#39;)
}))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our dataset has a lot of randomness to it, so it’s impossible to tell what the correlation is. But, it should at least be positive and somewhat linear. There aren’t likely to be many nodes that have the maximum number of degrees, so the variance should drop off as the degree increases (but this isn’t a guarantee!).&lt;/p&gt;
&lt;p&gt;A boxplot of showing degree and income is shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-27-networks-from-survey-data-creating-mock-data_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;
So, the theoretical people in our dataset with more connections to others should make more money, something that, could conceivably be true.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;neighbourhood-influence&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Neighbourhood influence&lt;/h4&gt;
&lt;p&gt;A common question in network analysis is: do nodes behave differently when they are connected to certain nodes. It’s like the old adage ~ &lt;em&gt;if you lie down with dogs you’ll get up with fleas&lt;/em&gt;. For this, we’ll pick out some random nodes and have their neighbourhoods adopt a similar value for a question like: do you buy the majority of your fruit and veg from a farmers market?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;influencers_df &amp;lt;- map_df(1:10, function(x){

  # pull a random node name
node. &amp;lt;- sample(V(create_sna_data)$name, 1)

  # get the node id, because to_local_neighborhood requires a numeric identifier (this is due to igraph).

 node_id. &amp;lt;- match(node., V(create_sna_data)$name)
  
 # pull the neighbourhoods of each node from above. 
neighbours. &amp;lt;- create_sna_data %&amp;gt;% 
  to_local_neighborhood(node = node_id., 
                        order = 1) %&amp;gt;% 
    .[[1]] %&amp;gt;% 
    as_tibble() %&amp;gt;% 
    pull(name)

 # create a tibble of both values for use in the next step

tibble(neighours. = neighbours.,
       centre = rep(node., length(neighbours.)))

}) 
# create new variable for each value returned above.

create_sna_data &amp;lt;- 
  create_sna_data %&amp;gt;% 
  mutate(buy_farm_mark = case_when(
    name %in% influencers_df$centre ~ &amp;#39;Every meal&amp;#39;,
    name %in% influencers_df$neighours. ~ &amp;#39;Most meals&amp;#39;,
    T ~ &amp;#39;Hardly any meals&amp;#39;
  ), 
  buy_farm_mark = factor(buy_farm_mark, 
                            levels = c(&amp;#39;Every meal&amp;#39;, 
                                       &amp;#39;Most meals&amp;#39;, 
                                       &amp;#39;Hardly any meals&amp;#39;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was a bit verbose and somewhat complicated, but it will be worth it. Let’s take a look below to see how it looks in our new data.
&lt;img src=&#34;/post/2020-03-27-networks-from-survey-data-creating-mock-data_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;community-influence&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Community influence&lt;/h4&gt;
&lt;p&gt;We’ll use a community detection algorithm for the last node attribute for our dataset. This one is a bit easier as we’ll just create a new variable using the &lt;code&gt;group_infomap&lt;/code&gt; function from &lt;code&gt;tidygraph&lt;/code&gt;/&lt;code&gt;igraph&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  to_undirected() %&amp;gt;% 
  mutate(cows_on_farm = 
           as.factor(group_infomap()))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The plot below illustrates the communities detected by &lt;code&gt;group_infomap&lt;/code&gt;. The only thing we’ve done here is to rename the variable. Easy enough!
&lt;img src=&#34;/post/2020-03-27-networks-from-survey-data-creating-mock-data_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We’ll now add edge attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;edge-attributes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Edge attributes&lt;/h3&gt;
&lt;p&gt;Edge attributes won’t be as complicated as node attributes for as we’ve aleady identified the relationship between nodes (edges). We’ll just need to think about a variable that would makes sense for trustful communities. One could be that number of cows is related to higher levels of trust (not super likely in the real world, but anything’s possible!). It’s an easy edge attribute to calculate so let’s do that one.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  mutate(trust_score = round(
              rescale(
              as.numeric(cows_on_farm), 
              c(1, 10))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;back-to-a-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Back to a tibble&lt;/h2&gt;
&lt;p&gt;We’ve been workig with a &lt;code&gt;tidygraph&lt;/code&gt; object for most the post. We’ll want to create a &lt;code&gt;tibble&lt;/code&gt; for our purposes. Remember, the goal is to create a mock survey dataset that we can use in the future to learn SNA. So it should look authentic. Let’s do that now.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;name_id_df &amp;lt;- create_sna_data %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  transmute(name, 
            value = row_number())

create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  activate(edges) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  gather(key, value) %&amp;gt;% 
  left_join(name_id_df) %&amp;gt;% 
  split(.$key) %&amp;gt;% 
  bind_cols() %&amp;gt;% 
  select(resp_name = name, 
         recieve_info = name1) %&amp;gt;% 
  bind_cols(create_sna_data %&amp;gt;% 
              as_tibble() %&amp;gt;% 
              select(-name))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All right, that’s it! We can look at our data below; hopefully, it looks like something we might collect in the future for SNA research.&lt;/p&gt;
&lt;table class=&#34;table table-striped table-hover table-responsive&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;caption&gt;
&lt;span id=&#34;tab:unnamed-chunk-13&#34;&gt;Table 1: &lt;/span&gt;Our mock dataset for SNA
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
resp_name
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
recieve_info
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
income_pre_tax
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
buy_farm_mark
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
cows_on_farm
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
trust_score
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Roberts, Nicole
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
el-Younis, Tayyiba
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£6,389.69
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Hardly any meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Dixon, Lanasia
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Stirewalt, Sutter
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£23,319.29
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Every meal
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Warat, Calvin
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Richardson, Chelsea
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£27,098.81
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Most meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Chroneos, Samuel
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Ocampo, Ruth
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£26,924.22
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Hardly any meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
4
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Lamichhane, Wesley
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
al-Shaheen, Husaam
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£36,799.65
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Hardly any meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Loehr, Jamie
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Schmalz, Keiley
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
£73,347.91
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
Most meals
&lt;/td&gt;
&lt;td style=&#34;text-align:left;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;font-weight: bold;color: black !important;background-color: white !important;&#34;&gt;
3
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
