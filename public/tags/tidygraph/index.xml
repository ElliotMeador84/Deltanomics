<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tidygraph | Deltanomics</title>
    <link>/tags/tidygraph/</link>
      <atom:link href="/tags/tidygraph/index.xml" rel="self" type="application/rss+xml" />
    <description>tidygraph</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020</copyright><lastBuildDate>Sun, 31 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu92a9dc9639b79cadf266306904fb01f6_516996_512x512_fill_lanczos_center_2.png</url>
      <title>tidygraph</title>
      <link>/tags/tidygraph/</link>
    </image>
    
    <item>
      <title>Be like me - looping through shortest distance analysis</title>
      <link>/post/sna/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/sna/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I’ve been doing some work lately on social networks that exist between organisations or institutions.
This is nice as it builds on some of my dissertation work, and I generally find it quite interesting.
Networks that form between organisations are often quite powerful, in that they can illustrate where strong areas of like-minded work exists or where new connections might be useful in strengthing one organation’s influence.&lt;/p&gt;
&lt;div id=&#34;why-like-me&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why like me?&lt;/h2&gt;
&lt;p&gt;Organisational ties – like personal relationships in business – can be extremely valuable to a firm’s bottom line.
These ties are often leveraged and manoeuvred in order to produce some sought-after result.
A few examples might be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do I know anyone at Organisation X who might have more information about some big grant schemed about to be launched?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Who in my inner circle has ties a business who might provide some venture capital for an idea I have?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The notion of leverage’s one’s networks is nothing new. It’s known as &lt;strong&gt;&lt;em&gt;social captial&lt;/em&gt;&lt;/strong&gt; theory in sociology, and is a well-known tactic taught in business schools.
Its applications are too big to get into in this blog post.
I’d sugggest taking a look this &lt;a href=&#34;https://www.forbes.com/sites/forbescoachescouncil/2018/11/27/two-ways-to-leverage-relationships-for-your-business-goals/#672d29eaa0cc&#34;&gt;Forbes&lt;/a&gt; article for a bit more information on why this might benefit you.
If you’re interested in leveraging one’s ties for their personal benefit from an academic perspective you can read some of my published articles or read works by James Coleman, Pierre Bourduea or Robert Putnam from the 1980’s and 1990’s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-nitty-gritty&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The nitty-gritty&lt;/h1&gt;
&lt;div id=&#34;some-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Some data&lt;/h2&gt;
&lt;p&gt;Now that we know it’s a worthwhile venture to leverage one’ network ties, let’s take a closer look at how we might approach this from a data perspective.
We’ll use a portion of the mock data we created in an earlier blog found &lt;a href=&#34;https://www.thedeltanomics.com/post/networks-from-survey-data-creating-mock-data/&#34;&gt;here&lt;/a&gt;.
The database created from the code in that blog post is called &lt;code&gt;create_sna_data&lt;/code&gt;, and we’ll be using it for the rest of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-what-were-looking-for&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Finding what we’re looking for&lt;/h2&gt;
&lt;p&gt;We’re going to be preforming shortest-distance analysis.
Shortest distance analysis, also known as shortest paths, is a common algorythm used anytime objects are found along a network.
It’s common in logistics work, especially regarding travel along a road or rail network.
GIS analysis uses this approach as well.
A great example is the Scottish Index of Multiple Deprivation’s use of shortest-distance analyis in looking at access as a deprivation in Scotland.
Take a look at the SIMD documentation &lt;a href=&#34;https://statistics.gov.scot/data/scottish-index-of-multiple-deprivation---geographic-access-to-services-indicators&#34;&gt;here&lt;/a&gt; for an overview.&lt;/p&gt;
&lt;p&gt;According to igraph’s documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… [shortest distance] calculates the length of all the shortest paths from or to the vertices in the network. [It] calculates one shortest path (the path itself, and not just its length) from or to the given vertex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s use the shortest distance function from tidygraph (which implements igraph’s &lt;code&gt;shortest.paths&lt;/code&gt; functionality) using a straight forward approach.&lt;/p&gt;
&lt;p&gt;Below let’s look at the shortest distance between two nodes.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;First, we’ll create a base layout from which to filter for sub-graphs when we want to show a path between two nodes.&lt;/li&gt;
&lt;li&gt;Then, we’ll plot the graph using &lt;code&gt;ggraph&lt;/code&gt;. &lt;code&gt;ggraph&lt;/code&gt; likes the layout matrices to be in &lt;code&gt;tibble&lt;/code&gt; form with the column names &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a filtering column called id.
create_sna_data &amp;lt;- create_sna_data %&amp;gt;% 
  mutate(id. = row_number())

# use the layout with stress algorythm to create a layout
layout_df &amp;lt;- create_sna_data %&amp;gt;% 
  layout_with_stress() %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  set_names(&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;) 


## And now the plot
create_sna_data %&amp;gt;% 
  ggraph(layout = layout_df)+ # our layout algorythm from above
  geom_edge_fan(start_cap = circle(2, &amp;#39;mm&amp;#39;), 
                end_cap = circle(2, &amp;#39;mm&amp;#39;))+
  geom_node_point(size = 4)+
  geom_node_text(aes(label = id.), 
                 size = 2.25, 
                 color = &amp;#39;white&amp;#39;)+
  labs(title = &amp;#39;Full network&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we’ll find the shortest path between two nodes: 75 and 4.
We’ll plot the shortest path as a network and lay it on top of the network above so we can visualise the path within the network.
To do this, we’ll calculate the layout tibble first and filter it for the shortest paths network using the &lt;code&gt;layout_with_stress&lt;/code&gt;function from the &lt;code&gt;graphlayouts&lt;/code&gt; package.
Note that the &lt;code&gt;to_shortest_path&lt;/code&gt; function can handle several shortest paths arguments, and that it returns a list.
We’ll use the &lt;code&gt;.[[1]]&lt;/code&gt; notion to grab the first item of the list, which is our shortest paths graph object. Also note that we’ll need to pull our nodes that sit along the shortest path from our layout dataframe.
We’ll use the &lt;code&gt;slice&lt;/code&gt; function in &lt;code&gt;dplyr&lt;/code&gt; for this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nodes_along_shortest_path &amp;lt;- create_sna_data %&amp;gt;%
 to_shortest_path(from = c(75), to = c(4)) %&amp;gt;%
  .[[1]] %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  pull(id.)


updated_layout &amp;lt;- layout_df %&amp;gt;% 
  slice(nodes_along_shortest_path)

shortest_path_75_to_4 &amp;lt;- create_sna_data %&amp;gt;%
 to_shortest_path(from = 75, to = 4) %&amp;gt;% 
  .[[1]] 

shortest_path_75_to_4 %&amp;gt;% 
  ggraph(layout = updated_layout)+
  geom_edge_fan(start_cap = circle(2, &amp;#39;mm&amp;#39;), 
                end_cap = circle(2, &amp;#39;mm&amp;#39;))+
  geom_node_point(size = 4)+
  geom_node_text(aes(label = id.), 
                 size = 2.5, 
                 color = &amp;#39;white&amp;#39;)+
  labs(title = &amp;#39;Shortest path between nodes 75 and 4&amp;#39;,
       subtitle = &amp;#39;The path shapes between 75 and 4 are directly comparable.\nIt\&amp;#39;s difficult to tell this because the two plots are not scaled 1:1 (they are zoomed to different levels)&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s use &lt;code&gt;case_when&lt;/code&gt; to create new variables that flag the shorest path nodes and edges.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;create_sna_data_updated &amp;lt;- 
  create_sna_data %&amp;gt;% 
  mutate(shortest_path_nodes = ifelse(
    id. %in% nodes_along_shortest_path, &amp;#39;Shortest Path&amp;#39;, &amp;#39;Long-way-round&amp;#39;
  ))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;color_v &amp;lt;- c(&amp;#39;#F46D43&amp;#39;, &amp;#39;#3288BD&amp;#39;)

names(color_v) &amp;lt;- c(&amp;#39;Shortest Path&amp;#39;, &amp;#39;Long-way-round&amp;#39;)

create_sna_data_updated %&amp;gt;% 
  ggraph(layout = layout_df)+
  geom_edge_fan(start_cap = circle(2, &amp;#39;mm&amp;#39;), 
                end_cap = circle(2, &amp;#39;mm&amp;#39;))+
  geom_node_point(aes(color = 
                        shortest_path_nodes), 
size = 4)+
  geom_node_text(aes(label = id.,
                     color = shortest_path_nodes), 
                 size = 2.5, 
                 color = &amp;#39;white&amp;#39;)+
  scale_color_manual(values = color_v, 
                     name = &amp;#39;Shortest path between 75 and 4&amp;#39;)+
  theme(legend.position = &amp;#39;bottom&amp;#39;)+ 
  guides(col = guide_legend(nrow = 2,
                            reverse = T))+
  labs(title = &amp;#39;Network updated with shortest path&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;leveraging-networks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Leveraging networks&lt;/h2&gt;
&lt;p&gt;The notion of leveraging networks comes from the reality that not every node in a network is available to us to draw resources from.
For the most part, a node has a useable relationship with only those nodes in its inner circle – or its one-degree neighbourhood.
Now, this isn’t always the case, but as a very general rule with SNA, the further one node is from another, the less influence they have on one another. SNA can help identify which people could put you in touch with some other person based on a set of pre-defined criteria.
SNA helps answer the question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do I know a dude who knows a dude?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;the-goal&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The goal&lt;/h3&gt;
&lt;p&gt;So let’s suppose our goal is to utilise our own social network to find a potential partner to work on a grant with us.
The funder of our grant scheme has a real soft spot for loners – i.e. one-degree nodes; maybe because before our funder made it big they used to be a one-degree node themselves.
&lt;strong&gt;&lt;em&gt;Who knows!&lt;/em&gt;&lt;/strong&gt;
Below we see our same network with the one-degree nodes highlighted.
&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We’ll pretend that we are &lt;strong&gt;&lt;em&gt;Mercurio, Kristin&lt;/em&gt;&lt;/strong&gt; (# 36), one of the most well-connected persons in the network (with a betweenness score of 3,541).&lt;/p&gt;
&lt;p&gt;We know that we want to partner with a node that has only-degree.
We will want to approach as many one-degree nodes as possible, as some will turn us down or might not be available to partner on the grant application.&lt;/p&gt;
&lt;p&gt;We also know that we get along with some people better than others, and that we’ll have to depend on our relationships to help leverage them.
It may sound crazy, but &lt;strong&gt;&lt;em&gt;Mercurio, Kristin&lt;/em&gt;&lt;/strong&gt; (ourself) gets along really well with &lt;em&gt;people who buy all their food from farmers markets&lt;/em&gt;.
So, we’ll use this to our advantage by trying to find as many shortest paths to single-degree nodes that are filled with nodes that buy all their meals at farmers markets.
We’ll do this with iterative programming otherwise known as &lt;strong&gt;&lt;em&gt;looping&lt;/em&gt;&lt;/strong&gt;.
Therefore, our approach is:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Assign a numeric scoring value for the column &lt;code&gt;buy_farm_mark&lt;/code&gt;, with more meals recieving a higher score.&lt;/li&gt;
&lt;li&gt;Identify all shortest paths between Mercurio, Kristin and all one-degree nodes in the network.&lt;/li&gt;
&lt;li&gt;Create a scaled score for each path that we can use to decide on who to contact first for partnering on the grant application.&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;step-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Step 1&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;farm_buy_n &amp;lt;- 
  tibble(buy_farm_mark = c(&amp;#39;Every meal&amp;#39;, 
                           &amp;#39;Most meals&amp;#39;, 
                           &amp;#39;Hardly any meals&amp;#39;), 
        farm_mark_score = c(2, 1, 0))


create_sna_data_updated &amp;lt;- 
  create_sna_data_updated %&amp;gt;% 
  left_join(farm_buy_n, 
            by = &amp;quot;buy_farm_mark&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Step 2&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;one_degree_names &amp;lt;- names(
  which(
    degree(
      create_sna_data_updated) == 1))

one_degree_ids &amp;lt;- 
  which(
    V(create_sna_data_updated)$name %in% 
      one_degree_names)

max_degree &amp;lt;- which(
  betweenness(
    create_sna_data_updated) == max(
      betweenness(
        create_sna_data_updated)))[1]

## The loop!!
all_shortest_one_degre_paths_ls &amp;lt;- 
  map(one_degree_ids, 
      function(x){
        
create_sna_data_updated %&amp;gt;% 
          
  morph(to_shortest_path, max_degree, x) %&amp;gt;% 
          mutate(selected_node = TRUE) %&amp;gt;% 
          activate(edges) %&amp;gt;% 
          mutate(selected_edge = TRUE) %&amp;gt;% 
          activate(nodes) %&amp;gt;% 
          unmorph()
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Step 3&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_scores &amp;lt;- 
  all_shortest_one_degre_paths_ls %&amp;gt;% 
  map(function(x){
    x %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  filter(selected_node) %&amp;gt;% 
  summarise(buy_farmers_market_score = sum(farm_mark_score), 
            n = n()) %&amp;gt;% 
  mutate(total_score =
           buy_farmers_market_score + n) %&amp;gt;% 
  pull(total_score)
  }) %&amp;gt;% 
  flatten_dbl()
  
  
highest_score &amp;lt;- which(all_scores == max(all_scores))
  

color_v_iii &amp;lt;- c(&amp;#39;#084081&amp;#39;, 
                 &amp;#39;#A8DDB5&amp;#39;)

names(color_v_iii) &amp;lt;- c(T, &amp;#39;Other&amp;#39;)

highest_score_g &amp;lt;- all_shortest_one_degre_paths_ls[[
  highest_score]] %&amp;gt;% 
  mutate(selected_node = ifelse(is.na(selected_node), &amp;#39;Other&amp;#39;, selected_node)) %&amp;gt;% 
  activate(edges) %&amp;gt;% 
  mutate(selected_edge = ifelse(is.na(selected_edge), &amp;#39;Other&amp;#39;, selected_edge)) 



highest_score_g %&amp;gt;% 
    ggraph(layout = layout_df)+
    geom_edge_fan(aes(color = selected_edge))+
    geom_node_point(aes(color = selected_node, 
                        shape = buy_farm_mark), 
                    size = 3)+
  scale_color_manual(values = color_v_iii, 
                     &amp;#39;Node path&amp;#39;, 
                     labels = c(&amp;#39;Other&amp;#39;, 
                                &amp;#39;Highest score&amp;#39;
                                ))+
  scale_edge_color_manual(values = color_v_iii, 
                          &amp;#39;Edge path&amp;#39;, 
                     labels = c(&amp;#39;Other&amp;#39;, 
                                &amp;#39;Highest score&amp;#39;
                                ))+
  scale_shape(&amp;#39;Meals bought from\nfarmers market&amp;#39;)+
  labs(title = &amp;#39;Highest score path graph&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-31-be-like-me-looping-through-shortest-distance-analysis_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Apples for apples I</title>
      <link>/post/apples-for-apples/quick-start-network-analysis/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/apples-for-apples/quick-start-network-analysis/</guid>
      <description>
&lt;link href=&#34;/rmarkdown-libs/tabwid/tabwid.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/tabwid/tabwid.js&#34;&gt;&lt;/script&gt;


&lt;h2&gt;
Introduction
&lt;/h2&gt;
&lt;p&gt;This is the initial Deltanomics blog post. So, in this post, I’ll cover a few different approaches to analysis and data visualisation rather quickly that provides a good overview of the types of things covered in this blog.&lt;/p&gt;
&lt;p&gt;Let’s start with loading the packages we’ll use. Also, let’s create a &lt;code&gt;ggplot&lt;/code&gt; theme that allows us to easily make changes when we want.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Libraries used in analysis
library(tidyverse)
library(magrittr)
library(scales)
library(RColorBrewer)
library(janitor)
library(ggraph)
library(tidygraph)
library(graphlayouts)
library(flextable)

## a congruent theme throughout for plots
post_theme &amp;lt;- function(...){
  theme(text = element_text(color = &amp;#39;black&amp;#39;, 
                            family = &amp;#39;serif&amp;#39;), 
        axis.text = element_text(color = &amp;#39;black&amp;#39;),
        panel.background = element_blank(), 
        axis.line.x = element_line(color = &amp;#39;black&amp;#39;), 
        axis.ticks = element_blank(), 
        plot.margin = margin(.5, .5, .5, .5, &amp;#39;cm&amp;#39;),
        plot.caption = element_text(hjust = 0, 
                                    face= &amp;quot;italic&amp;quot;), 
        plot.title = element_text(face = &amp;#39;bold&amp;#39;),
        plot.subtitle = element_text(face = &amp;#39;bold&amp;#39;),
        plot.title.position = &amp;quot;plot&amp;quot;, 
        plot.caption.position =  &amp;quot;plot&amp;quot;) +
          theme(...) # this bit allows us to make changes using this same function instead of calling two theme functions. 
        }&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
Data source
&lt;/h2&gt;
&lt;p&gt;We’re going to look at some FAO data on apples. It comes from the FAO’s online data portal, which can be accessed &lt;a href=&#34;http://www.fao.org/faostat/en/?#data/TM&#34;&gt;here&lt;/a&gt;. The website allows users to specify the varibles they want to analysis and download them into a .csv file. This makes working with the data a breeze using the &lt;code&gt;tidyverse&lt;/code&gt;. Let’s first take a quick look at the data.&lt;/p&gt;
&lt;p&gt;We use &lt;code&gt;read_csv&lt;/code&gt; from the &lt;code&gt;readr&lt;/code&gt; package (included in the &lt;code&gt;tidyverse&lt;/code&gt; library) and the function &lt;code&gt;clean_names&lt;/code&gt; from the &lt;code&gt;janitor&lt;/code&gt; package. &lt;code&gt;clean_names&lt;/code&gt; does exactly what it says it does – cleans up a &lt;code&gt;dataframe&lt;/code&gt;/&lt;code&gt;tibbles&lt;/code&gt;’s variable names so that they are easy to use in analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apples &amp;lt;- read_csv(&amp;#39;/Users/emeador/Downloads/FAOSTAT_data_1-1-2020.csv&amp;#39;) %&amp;gt;% clean_names()&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h2&gt;
Data Analysis
&lt;/h2&gt;
&lt;h3&gt;
General analysis
&lt;/h3&gt;
&lt;p&gt;Let’s do some really quick data analysis to get a feel of what the data works with. From there we’ll move on towards looking at apple supply chain.
A quick bar plot shows the top 20 exporting countries.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;apple_export_total &amp;lt;- apples %&amp;gt;%
  filter(element == &amp;#39;Export Quantity&amp;#39;, 
         flag_description == &amp;#39;Official data&amp;#39;)%&amp;gt;%
  group_by(reporter_countries) %&amp;gt;% 
  summarise(total = sum(value, na.rm = T)) %&amp;gt;% 
  mutate(reporter_countries=fct_reorder(reporter_countries,total))

apple_export_total %&amp;gt;% 
  top_n(20) %&amp;gt;% 
  ggplot(aes(reporter_countries, total))+
  geom_col(fill = &amp;#39;#ff0800&amp;#39;)+
  scale_y_continuous(expand = c(0,0), labels = comma)+
  coord_flip()+
  post_theme()+
  labs(title = &amp;#39;Top 20 countries that export apples in 2017&amp;#39;, subtitle = &amp;#39; SOURCE: FAO Detailed trade matrix&amp;#39;, x = NULL, y = &amp;#39;Tonnes&amp;#39;, caption = &amp;#39;NOTE: Only official data shown&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/Export-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;China, mainland is the highest exporter of tonnes of apples in 2017 according to the data with 1,328,374 tonnes of apples exported.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the top importers of apples to the UK. We can adapt the code above to create a bar plot that filters by the variable &lt;code&gt;parter_countries&lt;/code&gt;, which we’ll set to filter for &lt;em&gt;United Kingdom&lt;/em&gt; using the &lt;code&gt;==&lt;/code&gt; operator.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UK_import &amp;lt;- apples %&amp;gt;%
  filter(element == &amp;#39;Export Quantity&amp;#39;, 
         partner_countries == &amp;#39;United Kingdom&amp;#39;, 
         flag_description == &amp;#39;Official data&amp;#39;) %&amp;gt;% 
  group_by(reporter_countries) %&amp;gt;% 
  summarise(total = sum(value, na.rm = T)) %&amp;gt;% 
  mutate(reporter_countries = fct_reorder(reporter_countries, total)) %&amp;gt;% 
  top_n(20)

UK_import %&amp;gt;% 
  ggplot(aes(reporter_countries, total))+
  geom_col(fill = &amp;#39;#ff0800&amp;#39;)+
  scale_y_log10(expand = c(0,0), labels = comma)+
  coord_flip()+
  post_theme()+
  labs(title = &amp;#39;Where does the UK get its apples from?&amp;#39;, subtitle = &amp;#39; SOURCE: FAO Detailed trade matrix&amp;#39;, x = NULL, y = &amp;#39;log10(Tonnes)&amp;#39;, caption = &amp;#39;NOTE: Only official data shown&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/UK-imports-1.png&#34; width=&#34;576&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The UK imported 444,906 tonnes of apples in 2017. Over a quarter of all apples imported to the UK came from France and other European countries. So they didn’t have to travel too far. However, the largest and third largest imports came from South Africa and New Zealand, i.e. they traveled halfway across the world!&lt;/p&gt;
&lt;p&gt;Of course, it’s common for goods to travel great distances in today’s global economy. This of course impacts sustainability as traveling across the world increases the carbon output. And while a total carbon assessment is out of the scope of this post, we can use &lt;code&gt;network analysis&lt;/code&gt; to help better our understanding of how the global apple supply chain operates and where the UK sits in it all.&lt;/p&gt;
&lt;h3&gt;
Network analysis
&lt;/h3&gt;
&lt;p&gt;We need to create an &lt;code&gt;igraph&lt;/code&gt; object in &lt;code&gt;R&lt;/code&gt; from our &lt;code&gt;apples&lt;/code&gt; tibble to work with. The easiest way to do this is to create an edgelist from our data. An edgelist is a two-column list of nodes where adjacent nodes form an edge. &lt;code&gt;igraph&lt;/code&gt; and by extension &lt;code&gt;tidygraph&lt;/code&gt; will create graphs with dataframes that an edgelist in their first two columns. The remaining columns will be used as edge attributes.&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;tabwid&#34;&gt;&lt;table style=&#39;border-collapse:collapse;width:288px;&#39;&gt;&lt;caption&gt;Table 1: Edgelist example&lt;/caption&gt;&lt;thead&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;reporter_countries&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 2.00px solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;partner_countries&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Greece&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Bahrain&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Germany&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Cyprus&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Ireland&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Australia&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Poland&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Armenia&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Brunei Darussalam&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Japan&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Egypt&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Turkey&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Austria&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Malta&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Poland&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Republic of Moldova&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Lebanon&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;New Zealand&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;overflow-wrap:break-word;&#34;&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Denmark&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&#34;width:144px;background-color:transparent;vertical-align: middle;border-bottom: 2.00px solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;&#34;&gt;&lt;p style=&#34;margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2px;padding-top:2px;padding-left:5px;padding-right:5px;background-color:transparent;&#34;&gt;&lt;span style=&#34;font-family:&#39;Arial&#39;;font-size:11px;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(17, 17, 17, 1.00);background-color:transparent;&#34;&gt;Ireland&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
An example of the edgelist format is shown above in Table 1. In this example Greece is adjacent to Bahrain, so an edge will be drawn between the two.&lt;/p&gt;
&lt;p&gt;The code below creates a graph and plots it using &lt;code&gt;ggraph&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;aph &amp;lt;- apples %&amp;gt;%
  filter(element == &amp;#39;Export Quantity&amp;#39;, 
         flag_description == &amp;#39;Official data&amp;#39;) %&amp;gt;% 
  select(reporter_countries, partner_countries, value) %&amp;gt;% 
  as_tbl_graph()



aph %&amp;gt;% 
  mutate(degree = centrality_degree()) %&amp;gt;% 
  ggraph(&amp;#39;stress&amp;#39;)+ # specify the DH layout 
  geom_edge_fan(aes(alpha = ..index..), 
                color = &amp;#39;#654321&amp;#39;,
                show.legend = F)+
  geom_node_point(aes(size = degree), 
                  color = &amp;#39;#00c400&amp;#39;)+
  scale_size(range = c(1, 2.5), 
      name = &amp;#39;# different countries\n that exporting apples&amp;#39;)+
  coord_equal()+
  theme_graph(foreground = T)+
  labs(title = &amp;#39;The apple supply chain ... hairball&amp;#39;, 
       caption = &amp;#39;Without much formatting, the network is complicated and unreadable.\nThe look is characteristic of the hairball that sometimes occurs in network visualisations.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/Apple-network-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
The graph above is utterly unintelligable, and shoudn’t really appear in something you plan to publish. There are few things we can do to make the graph easier to understand when visualised. They are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove unnessary edges&lt;/strong&gt; – this serves a few purposes: it frees up some of the clutter that comes from having too many lines on the plot; but, another lesser known thing is that it actually affects the underlying &lt;code&gt;layout&lt;/code&gt; algorythim We’ll get into this in another post, but, in short, layout algorythims (usually) attempt to group nodes together in a way that reduces overlapping edges. Fewer edges can mean the nodes are spaced in a way so that naturally occuring patterns in connectivity are more easily seen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identify and showcase interesting patterns&lt;/strong&gt; – network graphs are often made better when they illustrate specific patterns that a researcher has previously identified through visualising the data or running statistical analysis. This is similar to plotting percents or sums using bars graphs – you choose the plot style (think geom_*’s in &lt;code&gt;ggplot2&lt;/code&gt;) that corresponds to what you want to showcase!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following code creates an edgelist in the form of a &lt;code&gt;tibble&lt;/code&gt; that has each county&#39;s top 2 exporting countries (the two countries where it send the most apples). This greatly reduces the number of edges and allows more nuanced findings in terms of apple trading patterns to emerge.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;UK_neighborhood_1 &amp;lt;- 
  aph %&amp;gt;% 
  to_local_neighborhood(node = 85, order = 1, mode = &amp;#39;in&amp;#39;)%&amp;gt;% 
  .[[1]] %&amp;gt;% 
  activate(edges) %&amp;gt;% 
  group_by(from) %&amp;gt;% 
  top_n(2, value) %&amp;gt;% 
  activate(nodes) %&amp;gt;% 
  mutate(degree = centrality_degree()) 

 UK_neighborhood_1 %&amp;gt;% 
  ggraph()+
  geom_edge_fan(aes(alpha = value), 
                color = &amp;#39;#654321&amp;#39;,
                width = 1.25, 
                arrow = arrow(length = unit(2.5, &amp;#39;mm&amp;#39;), 
                              type = &amp;#39;closed&amp;#39;),
                end_cap = circle(5, &amp;#39;mm&amp;#39;))+
  geom_node_label(aes(size = degree, 
                      label = str_wrap(name, 10)),
                  color = &amp;#39;#ff0800&amp;#39;,
                  show.legend = F)+
  scale_size(range = c(2, 3))+
   scale_edge_alpha(range = c(.5, 1), 
                    labels = comma)+
   scale_edge_width_continuous(range = c(.5, 1.5))+
  coord_equal()+
  theme_graph(foreground = T)+
  labs(title = &amp;#39;The UK\&amp;#39;s 1-degree apple supply neighborhood&amp;#39;, 
       caption = &amp;#39;Only the top-two export destinations are shown per country. All nodes have exactly two out-degrees.\nSome nodes have in-degrees because they happen to be another country\&amp;#39;s top-two imports.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/UK-network-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;h3&gt;
Visualising travel distance
&lt;/h3&gt;
&lt;h4&gt;
A quick base-map of the world
&lt;/h4&gt;
&lt;p&gt;We can draw on existing online resources to help us prepare a base map of the world using &lt;code&gt;ggplot&lt;/code&gt; and a (newish) file type called simple features &lt;code&gt;sf&lt;/code&gt;. &lt;a href=&#34;https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html&#34;&gt;Here&lt;/a&gt; is a great resource on mapping and spatial analysis in R using &lt;code&gt;ggplot2&lt;/code&gt; by Mel Moreno and Mathieu Basille. I highly recommend checking it out. &lt;code&gt;sf&lt;/code&gt; are my prefered object types to work with in R when doing any type of mapping or spatial analysis. The map is projected using the &lt;em&gt;Equal Earth&lt;/em&gt; projection to help readers more easily see the network edges (when they are plotted).&lt;/p&gt;
&lt;p&gt;Let’s take a look at a world map that we can use as a base for the network plot. We’ll use the &lt;code&gt;rnaturalearth&lt;/code&gt; and &lt;code&gt;rnaturalearthdata&lt;/code&gt; packages to provde parameters and data as &lt;code&gt;sf&lt;/code&gt; objects, and we’ll plot the map in &lt;code&gt;ggplot2&lt;/code&gt;. &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;ggraph&lt;/code&gt; can objects can be stacked on top of one another to create a flowing network map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rnaturalearth)
library(rnaturalearthdata)

countries &amp;lt;- ne_countries(returnclass = &amp;quot;sf&amp;quot;)


graticules &amp;lt;- ne_download(type = &amp;quot;graticules_15&amp;quot;, 
                          category = &amp;quot;physical&amp;quot;,
                          returnclass = &amp;quot;sf&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;/private/var/folders/ck/v11m55r567d9z7ql_1vvdy600000gn/T/Rtmpb9TTSG&amp;quot;, layer: &amp;quot;ne_110m_graticules_15&amp;quot;
## with 35 features
## It has 5 fields
## Integer64 fields read as strings:  degrees scalerank&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bound_box &amp;lt;- ne_download(type = &amp;quot;wgs84_bounding_box&amp;quot;, 
                  category = &amp;quot;physical&amp;quot;,
                  returnclass = &amp;quot;sf&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;/private/var/folders/ck/v11m55r567d9z7ql_1vvdy600000gn/T/Rtmpb9TTSG&amp;quot;, layer: &amp;quot;ne_110m_wgs84_bounding_box&amp;quot;
## with 1 features
## It has 2 fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(base_world &amp;lt;- ggplot() +
  geom_sf(data = bound_box, 
          col = &amp;quot;grey20&amp;quot;, 
          fill = &amp;quot;transparent&amp;quot;) +
  geom_sf(data = countries, 
          aes(fill = sovereignt),
          color = &amp;#39;grey&amp;#39;,
          lwd = 0.3,
          show.legend = F) +
  scale_fill_viridis_d(direction = -1)+
  post_theme(legend.position = &amp;#39;bottom&amp;#39;, 
             legend.background = 
               element_rect(fill = &amp;#39;grey95&amp;#39;, 
                            color = &amp;#39;black&amp;#39;))+
  theme(plot.title = element_text(size = 24,
                                  face = &amp;#39;bold&amp;#39;), 
        axis.text = element_blank())+
  labs(title = &amp;#39;World Map&amp;#39;, 
       caption = &amp;#39;Projected with the Equal Earth map projection &amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/travel-map-1.png&#34; width=&#34;1152&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
&lt;h4&gt;
Combining the basemap and network graph
&lt;/h4&gt;
&lt;p&gt;In preparation for our supply chain we need to calculate the node positions for each country. A good starting point is to use a polygon’s centroid points. A polygon centroid is the mathmatical centre of mass. Which means that it’s slightly different that the mean of longitude and latitude. The unique and non-uniform shapes of most policital boundaries mean that centre-mass locations are usually preferred. We can use the ‘st_centroid’ function from the ‘sf’ package to calculate the centroids for every country in the world. We’ll save this as ‘country_centroids’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get centroids
country_centroids &amp;lt;- countries %&amp;gt;% 
  sf::st_centroid() %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  select(name, geometry) %&amp;gt;% 
  mutate(geometry  = as.character(geometry)) %&amp;gt;% 
  separate(geometry, c(&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;), sep = &amp;#39;,&amp;#39;) %&amp;gt;% 
  mutate_at(vars(x, y), list(~parse_number(.)))


# a little cleaning of a few countries to 
# ensure that they merge properly. 
node_centroids &amp;lt;- UK_neighborhood_1 %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  select(name) %&amp;gt;% 
  mutate(name = case_when(
    str_detect(name, &amp;#39;China&amp;#39;) ~ &amp;#39;China&amp;#39;, 
    str_detect(name, &amp;#39;Iran&amp;#39;) ~ &amp;#39;Iran&amp;#39;, 
    str_detect(name, &amp;#39;Czechia&amp;#39;) ~ &amp;#39;Czech Rep.&amp;#39;, 
    str_detect(name, &amp;#39;United States of America&amp;#39;) ~ 
      &amp;#39;United States&amp;#39;, 
    T~name
  )) %&amp;gt;% 
  left_join(country_centroids) 

layout_centroid &amp;lt;- node_centroids %&amp;gt;% 
  select(-name)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we’ll use &lt;code&gt;ggraph&lt;/code&gt; to make the final plot. We use a layered approach and add some &lt;code&gt;geom_sf&lt;/code&gt;’s to input the background world map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# start with a ggraph
ggraph(UK_neighborhood_1, 
         layout = layout_centroid)+
    geom_sf(data = bound_box, 
          col = &amp;quot;grey20&amp;quot;, 
          fill = &amp;quot;transparent&amp;quot;) +
  geom_sf(data = countries, ## add the geom_sf to map
          aes(fill = sovereignt), 
          color = &amp;#39;grey&amp;#39;, 
          lwd = 0.3,
          show.legend = F)+
  geom_edge_arc(arrow = arrow(type = &amp;#39;closed&amp;#39;, # add geom_edge for edges
                              length = unit(1, &amp;#39;mm&amp;#39;)),
                width = .75, 
                color = &amp;#39;black&amp;#39;,
                end_cap = circle(1.25, &amp;#39;mm&amp;#39;), 
                alpha = .75, 
                strength = .15)+
  post_theme(legend.position = &amp;#39;bottom&amp;#39;, 
             legend.background = 
               element_rect(fill = &amp;#39;grey95&amp;#39;, 
                            color = &amp;#39;black&amp;#39;))+
  scale_fill_viridis_d(direction = -1)+
  theme(plot.title = element_text(size = 24,
                                  face = &amp;#39;bold&amp;#39;), 
        axis.text = element_blank())+
  labs(title = &amp;#39;Apples for apples&amp;#39;, 
       subtitle = &amp;#39;UK first degree network&amp;#39;,
       caption = &amp;#39;Projected with the Equal Earth map projection &amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/Apples-for-apples/Apples_for_apples_i_files/figure-html/final-supply-map-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
